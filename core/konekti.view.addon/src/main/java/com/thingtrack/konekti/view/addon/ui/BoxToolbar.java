package com.thingtrack.konekti.view.addon.ui;

import java.io.Serializable;

import org.vaadin.peter.buttongroup.ButtonGroup;

import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeEvent;
import com.thingtrack.konekti.view.addon.data.BindingSource.IndexChangeListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.terminal.gwt.client.MouseEventDetails;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

@SuppressWarnings("serial")
public class BoxToolbar extends AbstractToolbar {

	@AutoGenerated
	private HorizontalLayout toolbarLayout;

	@AutoGenerated
	private Button btnPrint;

	@AutoGenerated
	private Button btnFilter;
	
	@AutoGenerated
	private Button btnAttach;

	@AutoGenerated
	private Button btnImport;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private Object register;
	
	// navigator button listeners
	private ClickPrintButtonListener listenerPrintButton = null;
	private ClickAttachButtonListener listenerAttachButton = null;
	private ClickFilterButtonListener listenerFilterButton = null;
	private ClickImportButtonListener listenerImportButton = null;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */	
	public BoxToolbar(int position, final BindingSource<?> bindingSource) {
		super(position, bindingSource);
			
		buildMainLayout();
		
		// TODO add user code here
		btnFilter.setDescription("Filtrar Tabla");
		btnFilter.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				
				if(listenerFilterButton != null)
					listenerFilterButton.filterButtonClick(new ClickNavigationEvent(btnFilter, event.getComponent()));
			}
		});
		
		btnPrint.setDescription("Imprimir Tabla");
		btnPrint.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
	
				if(listenerPrintButton != null)
					listenerPrintButton.printButtonClick(new ClickNavigationEvent(btnPrint, event.getComponent()));
				
			}
		});
		
		btnAttach.setDescription("Adjuntar Fichero");
		btnAttach.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					attachFile();
				} catch (IllegalArgumentException e) {
					throw new RuntimeException("¡No se pudo mostrar el formulario para adjuntar ficheros!", e);
				} catch (IllegalAccessException e) {
					throw new RuntimeException("¡No se pudo mostrar el formulario para adjuntar ficheros!", e);
				}
				
				if(listenerAttachButton != null)
					listenerAttachButton.attachButtonClick(new ClickNavigationEvent(btnAttach, event.getComponent()));
				
			}
		});
		
		btnImport.setDescription("Importar Fichero");
		btnImport.setVisible(false);
		btnImport.addListener(new Button.ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					importFile();
				} catch (IllegalArgumentException e) {
					throw new RuntimeException("¡No se pudo mostrar el formulario para importar ficheros!", e);
				} catch (IllegalAccessException e) {
					throw new RuntimeException("¡No se pudo mostrar el formulario para importar ficheros!", e);
				}
								
			}
		});
				
	}
	
	public void setImportButton(boolean visible) {
		this.btnImport.setVisible(visible);
		
	}
	
	@Override
	public int getPosition() {
		return this.position;
		
	}

	@Override
	public ComponentContainer getContent() {
		return this.toolbarLayout;
		
	}
	
	@Override
	public BindingSource<?> getBindingSource() {
		return this.bindingSource;
	}

	@Override
	public void setBindingSource(BindingSource<?> bindingSource) {
		this.bindingSource = bindingSource;
		
		// add change index binding source
		if (bindingSource != null) {
			bindingSource.addListenerToolBar((IndexChangeListener)this);
			
			// initialize binding source
			//bindingSource.Initialize();
		}
		
	}
	
	public void addListenerPrintButton(ClickPrintButtonListener listener) {
		this.listenerPrintButton = listener;
		
	}

	public void addListenerAttachButton(ClickAttachButtonListener listener) {
		this.listenerAttachButton = listener;
		
	}
	
	public void addListenerFilterButton(ClickFilterButtonListener listener) {
		this.listenerFilterButton = listener;
		
	}

	public void addListenerImportButton(ClickImportButtonListener listener) {
		this.listenerImportButton = listener;
		
	}
		
	public interface ClickPrintButtonListener extends Serializable {
        public void printButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickAttachButtonListener extends Serializable {
        public void attachButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickFilterButtonListener extends Serializable {
        public void filterButtonClick(ClickNavigationEvent event);

    }

	public interface ClickImportButtonListener extends Serializable {
        public void importButtonClick(ClickNavigationEvent event);

    }
	
	public class ClickNavigationEvent extends ClickEvent {
		private int index;
		private Object register;
		private byte[] file;
		
		public ClickNavigationEvent(Button button, Component source) {
			button.super(source);
			
		}

		public ClickNavigationEvent(Button button, byte[] file, Component source) {
			button.super(source);
			
			this.file = file;
		}
		
		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details) {
			button.super(source, details);
			
		}

		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details, Object register, int index) {
			button.super(source, details);
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;
			
		}
		
		public Object getRegister() {
			return this.register;
			
		}
		
		public byte[] getFile() {
			return this.file;
			
		}
	  }
		
	@Override
	public void bindingSourceIndexChange(IndexChangeEvent event) {
		if (bindingSource != null) {
			// TODO Auto-generated method stub
		}
		
	}
	
	@AutoGenerated
	private void buildMainLayout() {

		// toolbarLayout
		toolbarLayout = buildToolbarLayout();
		addComponent(toolbarLayout);
	}

	public void attachFile() throws IllegalArgumentException, IllegalAccessException {
		int index = bindingSource.getIndex();
		
		if (index == 0)
			return;
		
		register = bindingSource.getItemId();
		
		AttachmentViewForm attachmentViewForm = new AttachmentViewForm();
		attachmentViewForm.setEntity(register);
		
		getApplication().getMainWindow().addWindow(attachmentViewForm);
	}
	
	private void importFile() throws IllegalArgumentException, IllegalAccessException {
		final UploadViewForm uploadViewForm = new UploadViewForm(null);
		
		uploadViewForm.setWidth("300px");
		uploadViewForm.setHeight("-1px");
		uploadViewForm.addListener(new CloseListener() {				
			@Override
			public void windowClose(CloseEvent e) {
				byte[] file = uploadViewForm.getFile();
				
				if(listenerImportButton != null)
					listenerImportButton.importButtonClick(new ClickNavigationEvent(btnImport, file, e.getComponent()));
		    					    		
	    			    		
			}
		});
		
		getApplication().getMainWindow().addWindow(uploadViewForm);
		
	}
	
	@AutoGenerated
	private HorizontalLayout buildToolbarLayout() {	
		// common part: create layout
		toolbarLayout = new HorizontalLayout();
		toolbarLayout.setImmediate(false);
		toolbarLayout.setSpacing(true);

		ButtonGroup toolBoxButtonGroup = new ButtonGroup();
		toolbarLayout.addComponent(toolBoxButtonGroup);
		toolbarLayout.setExpandRatio(toolBoxButtonGroup, 1.0f);
		
		// btnFilter
		btnFilter = new Button();
		btnFilter.setImmediate(true);
		btnFilter.setWidth("-1px");
		btnFilter.setHeight("-1px");
		btnFilter.setIcon(new ThemeResource("../konekti/images/icons/box-toolbar/funnel.png"));
		
		toolBoxButtonGroup.addButton(btnFilter);
		
		// btnAttach
		btnAttach = new Button();
		btnAttach.setImmediate(true);
		btnAttach.setWidth("-1px");
		btnAttach.setHeight("-1px");
		btnAttach.setIcon(new ThemeResource("../konekti/images/icons/box-toolbar/paper-clip.png"));
		
		toolBoxButtonGroup.addButton(btnAttach);
		
		// btnPrint
		btnPrint = new Button();
		btnPrint.setImmediate(true);
		btnPrint.setWidth("-1px");
		btnPrint.setHeight("-1px");
		btnPrint.setIcon(new ThemeResource("../konekti/images/icons/box-toolbar/printer.png"));
		
		toolBoxButtonGroup.addButton(btnPrint);
		
		// btnPrint
		btnImport = new Button();
		btnImport.setImmediate(true);
		btnImport.setWidth("-1px");
		btnImport.setHeight("-1px");
		btnImport.setIcon(new ThemeResource("../konekti/images/icons/servicetemplate-module/document-excel.png"));
		
		toolBoxButtonGroup.addButton(btnImport);
		
		return toolbarLayout;
	}

}
