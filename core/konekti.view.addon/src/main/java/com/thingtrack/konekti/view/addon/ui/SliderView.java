package com.thingtrack.konekti.view.addon.ui;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.addons.sliderlayout.SliderLayout;
import com.vaadin.addons.sliderlayout.SliderLayout.AnimationTerminateListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;

import com.thingtrack.konekti.view.kernel.ui.layout.ISliderView;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewChangeListener;
import com.thingtrack.konekti.view.kernel.ui.layout.ViewEvent;

import com.thingtrack.konekti.view.kernel.ui.layout.IView;

@SuppressWarnings("serial")
public class SliderView extends CustomComponent implements ISliderView {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private SliderLayout sliderLayout;
	@AutoGenerated
	private HorizontalLayout hlBreadcrumb; // do nothing

	private IView selectedView = null;
	
	private List<IViewChangeListener> viewChangelisteners = new ArrayList<IViewChangeListener>();
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
		
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public SliderView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		sliderLayout.setRemoveSlide(false);
		sliderLayout.addListener(new AnimationTerminateListener() {			
			@Override
			public void slideTerminated(Component fromView, Component toView) {
				selectedView = (AbstractView)toView;
				
				for(IViewChangeListener listener : viewChangelisteners )
					listener.viewChanged(new ViewEvent((IView)fromView, (IView) toView));
				
			}
		});
		
	}

	public SliderLayout getSliderLayout() {
		return this.sliderLayout;
		
	}
	
	public boolean isRemoveSlide() {
		return sliderLayout.isRemoveSlide();
		
	}	

	public void setRemoveSlide(boolean removeSlide) {
		sliderLayout.setRemoveSlide(removeSlide);
		
	}
	
	@Override
	public void addView(IView view) {				
		addView((AbstractView) view, false);
		
	}
		
	public void addView(AbstractView view, boolean animateToNext) {		
		// add new view to the slider component
		sliderLayout.addSlide(view, animateToNext);
						
		// only selected the first slide added
		if (selectedView == null)
			selectedView = view;
		
	}
	
	public void addView(AbstractView view, int slideTo) {
		// add new view to the slider component
		sliderLayout.addSlide(view, slideTo);
	
		if (selectedView == null)
			selectedView = view;
		
	}


	@Override
	public int getViewCount() {
		return sliderLayout.getComponentCount();
		
	}
	
	@Override
	public void rollNext() {
		sliderLayout.rollNext();
		
	}

	@Override
	public void rollPrevious() {
		sliderLayout.rollPrevious();
		
	}

	@Override
	public void rollTo(int slideTo) {
		sliderLayout.rollTo(slideTo);
		
	}
	
	@Override
	public IView getSelectedView() {
		return selectedView;
	}
	
	public void addListener(IViewChangeListener listener) {
		this.viewChangelisteners.add(listener);
	}
	
	public boolean removeListener(IViewChangeListener listener){
		return this.viewChangelisteners.remove(listener);
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// hlBreadcrumb
		hlBreadcrumb = new HorizontalLayout();
		hlBreadcrumb.setEnabled(false);
		hlBreadcrumb.setImmediate(false);
		hlBreadcrumb.setVisible(false);
		hlBreadcrumb.setWidth("100.0%");
		hlBreadcrumb.setHeight("-1px");
		hlBreadcrumb.setMargin(false);
		mainLayout.addComponent(hlBreadcrumb);
		
		// sliderLayout
		sliderLayout = new SliderLayout();
		sliderLayout.setImmediate(false);
		sliderLayout.setWidth("100.0%");
		sliderLayout.setHeight("100.0%");
		mainLayout.addComponent(sliderLayout);
		mainLayout.setExpandRatio(sliderLayout, 1.0f);
		
		return mainLayout;
	}

}
