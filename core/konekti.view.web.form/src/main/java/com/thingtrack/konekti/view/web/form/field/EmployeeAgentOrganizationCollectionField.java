package com.thingtrack.konekti.view.web.form.field;

import java.util.List;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;
import org.vaadin.addon.customfield.CustomField;

import com.thingtrack.konekti.domain.Area;
import com.thingtrack.konekti.domain.EmployeeAgent;
import com.thingtrack.konekti.domain.Location;
import com.thingtrack.konekti.domain.Organization;
import com.thingtrack.konekti.service.api.OrganizationService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.TreeTable;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class EmployeeAgentOrganizationCollectionField extends CustomField {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TreeTable employeeAgentOrganizationTreeTable;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private OrganizationService organizationService;
	
	private EmployeeAgent employeeAgent;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public EmployeeAgentOrganizationCollectionField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		getServices();
		
		employeeAgentOrganizationTreeTable.addContainerProperty("Name", CheckBox.class, "");
		employeeAgentOrganizationTreeTable.addContainerProperty("Description", String.class, "");
		employeeAgentOrganizationTreeTable.addContainerProperty("Defecto", CheckBox.class, "");
		
	}

	@Override
	public void setValue(Object object) {
		super.setValue(object);
		
		if(object instanceof EmployeeAgent){
			employeeAgent = (EmployeeAgent)object;

			try {
				fillTreeTable();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
					
	}
	
	@Override
	public void setPropertyDataSource(Property newDataSource) {
		if(newDataSource.getValue() instanceof EmployeeAgent){
			employeeAgent = (EmployeeAgent) newDataSource.getValue();

			try {
				fillTreeTable();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		super.setPropertyDataSource(newDataSource);
	}

	@Override
	public Class<?> getType() {
		if(getPropertyDataSource() instanceof Property)
			return getPropertyDataSource().getType();

		return EmployeeAgent.class;
	}

	@Override
	public Object getValue() {		
		return employeeAgent;

	}

	private void fillTreeTable() throws Exception {
		List<Organization> organizations = organizationService.getAll();
		
		int organizationId = 0;
		int locationId = 0;
		int areaId = 0;
		int entityId = 0;
		
		for (Organization organization : organizations) {
			CheckBox organizationCheck = new CheckBox(organization.getCode());
			organizationCheck.setValue(containsOrganization(organization.getCode()));
			CheckBox organizationDefaultCheck = new CheckBox();
			organizationDefaultCheck.setValue(isDefaultOrganization(organization.getCode()));
			employeeAgentOrganizationTreeTable.addItem(new Object[]{organizationCheck, organization.getName(), organizationDefaultCheck}, entityId);			
			organizationId = entityId;
			
			entityId++;
			for (Location location : organization.getLocations()) {		
				CheckBox locationCheck = new CheckBox(location.getCode());
				locationCheck.setValue(containsLocation(location.getCode()));
				CheckBox locationDefaultCheck = new CheckBox();
				locationDefaultCheck.setValue(isDefaultLocation(location.getCode()));
				employeeAgentOrganizationTreeTable.addItem(new Object[]{locationCheck, location.getName(), locationDefaultCheck}, entityId);
				locationId = entityId;
				
				employeeAgentOrganizationTreeTable.setParent(locationId, organizationId);
				
				entityId++;
				for (Area area : location.getAreas()) {
					CheckBox areaCheck = new CheckBox(area.getCode());
					areaCheck.setValue(containsArea(area.getCode()));
					CheckBox areaDefaultCheck = new CheckBox();
					areaDefaultCheck.setValue(isDefaultArea(area.getCode()));
					employeeAgentOrganizationTreeTable.addItem(new Object[]{areaCheck, area.getName(), areaDefaultCheck}, entityId);
					areaId = entityId;
					
					employeeAgentOrganizationTreeTable.setParent(areaId, locationId);
				
					entityId++;
				}
				
			}

		}		
		
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void getServices(){		
		BundleContext bundleContext = FrameworkUtil.getBundle(this.getClass()).getBundleContext();
		
		ServiceReference organizationServiceReference = bundleContext.getServiceReference(OrganizationService.class.getName());
		organizationService =  OrganizationService.class.cast(bundleContext.getService(organizationServiceReference));
	}
	
	private boolean containsOrganization(String code) {
		for (Organization organization : employeeAgent.getOrganizations()) {
			if (organization.getCode().equals(code))
				return true;
		}
		
		return false;
		
	}
	
	private boolean isDefaultOrganization(String code) {
		if (employeeAgent.getUser() == null)
			return false;
		
		if (employeeAgent.getUser().getDefaultOrganization().getCode().equals(code))
			return true;
		
		return false;
		
	}
	
	private boolean containsLocation(String code) {
		for (Location location : employeeAgent.getLocations()) {
			if (location.getCode().equals(code))
				return true;
		}
		
		return false;
		
	}

	private boolean isDefaultLocation(String code) {
		if (employeeAgent.getUser() == null)
			return false;
		
		if (employeeAgent.getUser().getDefaultLocation().getCode().equals(code))
			return true;
		
		return false;
		
	}
	
	private boolean containsArea(String code) {
		for (Area area : employeeAgent.getAreas()) {
			if (area.getCode().equals(code))
				return true;
		}
		
		return false;
		
	}
	
	private boolean isDefaultArea(String code) {
		if (employeeAgent.getUser() == null)
			return false;
		
		if (employeeAgent.getUser().getDefaultArea().getCode().equals(code))
			return true;
		
		return false;
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// employeeAgentOrganizationTreeTable
		employeeAgentOrganizationTreeTable = new TreeTable();
		employeeAgentOrganizationTreeTable.setImmediate(true);
		employeeAgentOrganizationTreeTable.setWidth("100.0%");
		employeeAgentOrganizationTreeTable.setHeight("100.0%");
		mainLayout.addComponent(employeeAgentOrganizationTreeTable);
		mainLayout.setExpandRatio(employeeAgentOrganizationTreeTable, 1.0f);

		return mainLayout;
	}

}
