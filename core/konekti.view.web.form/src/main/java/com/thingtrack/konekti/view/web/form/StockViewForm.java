package com.thingtrack.konekti.view.web.form;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import com.thingtrack.konekti.domain.Product;
import com.thingtrack.konekti.domain.ProductUnit;
import com.thingtrack.konekti.domain.StockStatus;
import com.thingtrack.konekti.domain.Warehouse;
import com.thingtrack.konekti.service.api.ProductService;
import com.thingtrack.konekti.service.api.ProductUnitService;
import com.thingtrack.konekti.service.api.StockStatusService;
import com.thingtrack.konekti.service.api.WarehouseService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;
import com.vaadin.data.Property.ValueChangeListener;

@SuppressWarnings("serial")
public class StockViewForm extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TextField loteField;
	@AutoGenerated
	private TextField serialNumberField;
	@AutoGenerated
	private ComboBox stockStatusField;
	@AutoGenerated
	private ComboBox productUnitField;
	@AutoGenerated
	private ComboBox warehouseField;
	@AutoGenerated
	private DateField expeditionDateField;
	@AutoGenerated
	private DateField stockDateField;
	@AutoGenerated
	private TextField quantityField;
	@AutoGenerated
	private ComboBox productField;
	@AutoGenerated
	private TextField priceField;
	@AutoGenerated
	private TextField commentField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private WarehouseService warehouseService;
	private ProductService productService;
	private ProductUnitService productUnitService;
	private StockStatusService stockStatusService;
	
	private BeanItemContainer<Warehouse> bcWarehouse = new BindingSource<Warehouse>(Warehouse.class);
	private BeanItemContainer<Product> bcProduct = new BindingSource<Product>(Product.class);
	private BeanItemContainer<ProductUnit> bcProductUnit = new BindingSource<ProductUnit>(ProductUnit.class);
	private BeanItemContainer<StockStatus> bcStockStatus = new BindingSource<StockStatus>(StockStatus.class);
	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public StockViewForm() throws IllegalArgumentException, Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initComponents();
		
		// configure Organization Type data
		stockStatusField.setNullSelectionAllowed(false);
		stockStatusField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		stockStatusField.setItemCaptionPropertyId("description");
		
		productUnitField.setNullSelectionAllowed(false);
		productUnitField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		productUnitField.setItemCaptionPropertyId("description");
		
		warehouseField.setNullSelectionAllowed(false);
		warehouseField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		warehouseField.setItemCaptionPropertyId("description");

		productField.setNullSelectionAllowed(false);
		productField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		productField.setItemCaptionPropertyId("description");
		
		// get form services from OSGi Service Registry
		getServices();
		
		// load data sources
		loadData();
		
		// fill the units from product selected
		productField.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				try {
					Product producSelected = (Product)productField.getValue();
					
					if (producSelected != null) {
						bcProductUnit.removeAllItems();
						bcProductUnit.addAll(producSelected.getProductUnits());
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		});
		
	}
	
	private void initComponents() {
		quantityField.setNullRepresentation("");
		priceField.setNullRepresentation("");
		commentField.setNullRepresentation("");
		serialNumberField.setNullRepresentation("");
		loteField.setNullRepresentation("");
		
		stockDateField.setDateFormat("dd/MM/yyyy HH:mm");
		expeditionDateField.setDateFormat("dd/MM/yyyy");
		
		warehouseField.setRequiredError(warehouseField.getCaption() + " es un campo requerido");
		productUnitField.setRequiredError(productUnitField.getCaption() + " es un campo requerido");
		stockStatusField.setRequiredError(stockStatusField.getCaption() + " es un campo requerido");
		stockDateField.setRequiredError(stockDateField.getCaption() + " es un campo requerido");
				
		warehouseField.focus();
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(StockViewForm.class).getBundleContext();

			ServiceReference stockStatusServiceReference = bundleContext.getServiceReference(StockStatusService.class.getName());
			stockStatusService = StockStatusService.class.cast(bundleContext.getService(stockStatusServiceReference));
			
			ServiceReference productUnitServiceReference = bundleContext.getServiceReference(ProductUnitService.class.getName());
			productUnitService = ProductUnitService.class.cast(bundleContext.getService(productUnitServiceReference));
			
			ServiceReference warehouseServiceReference = bundleContext.getServiceReference(WarehouseService.class.getName());
			warehouseService = WarehouseService.class.cast(bundleContext.getService(warehouseServiceReference));
			
			ServiceReference productServiceReference = bundleContext.getServiceReference(ProductService.class.getName());
			productService = ProductService.class.cast(bundleContext.getService(productServiceReference));
			
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	private void loadData() throws IllegalArgumentException, Exception {
		bcStockStatus.removeAllItems();
		bcStockStatus.addAll(stockStatusService.getAll());	
		
		stockStatusField.setContainerDataSource(bcStockStatus);
		
		bcProductUnit.removeAllItems();
		bcProductUnit.addAll(productUnitService.getAll());		
		
		productUnitField.setContainerDataSource(bcProductUnit);
		
		bcWarehouse.removeAllItems();
		bcWarehouse.addAll(warehouseService.getAll());		
		
		warehouseField.setContainerDataSource(bcWarehouse);
		
		bcProduct.removeAllItems();
		bcProduct.addAll(productService.getAll());		
		
		productField.setContainerDataSource(bcProduct);
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("580px");
		mainLayout.setHeight("340px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("580px");
		setHeight("340px");
		
		// commentField
		commentField = new TextField();
		commentField.setCaption("Comentario");
		commentField.setImmediate(false);
		commentField.setWidth("540px");
		commentField.setHeight("140px");
		commentField.setTabIndex(11);
		mainLayout.addComponent(commentField, "top:180.0px;left:20.0px;");
		
		// priceField
		priceField = new TextField();
		priceField.setCaption("Precio");
		priceField.setImmediate(false);
		priceField.setWidth("100.0%");
		priceField.setHeight("-1px");
		priceField.setTabIndex(2);
		mainLayout.addComponent(priceField,
				"top:17.0px;right:275.0px;left:221.0px;");
		
		// productField
		productField = new ComboBox();
		productField.setRequired(true);
		productField.setCaption("Producto");
		productField.setImmediate(false);
		productField.setWidth("300px");
		productField.setHeight("-1px");
		productField.setTabIndex(4);
		mainLayout.addComponent(productField, "top:57.0px;left:20.0px;");
		
		// quantityField
		quantityField = new TextField();
		quantityField.setCaption("Cantidad");
		quantityField.setImmediate(false);
		quantityField.setWidth("60px");
		quantityField.setHeight("-1px");
		quantityField.setTabIndex(5);
		mainLayout.addComponent(quantityField, "top:57.0px;left:340.0px;");
		
		// stockDateField
		stockDateField = new DateField();
		stockDateField.setCaption("Fecha almacenamiento");
		stockDateField.setImmediate(false);
		stockDateField.setWidth("180px");
		stockDateField.setHeight("-1px");
		stockDateField.setInvalidAllowed(false);
		stockDateField.setTabIndex(3);
		stockDateField.setRequired(true);
		stockDateField.setResolution(2);
		mainLayout.addComponent(stockDateField, "top:17.0px;left:380.0px;");
		
		// expeditionDateField
		expeditionDateField = new DateField();
		expeditionDateField.setCaption("Fecha caducidad");
		expeditionDateField.setImmediate(false);
		expeditionDateField.setWidth("180px");
		expeditionDateField.setHeight("-1px");
		expeditionDateField.setInvalidAllowed(false);
		expeditionDateField.setTabIndex(10);
		expeditionDateField.setResolution(4);
		mainLayout.addComponent(expeditionDateField,
				"top:139.0px;left:380.0px;");
		
		// warehouseField
		warehouseField = new ComboBox();
		warehouseField.setCaption("Almac√©n");
		warehouseField.setImmediate(false);
		warehouseField.setWidth("180px");
		warehouseField.setHeight("-1px");
		warehouseField.setTabIndex(1);
		warehouseField.setRequired(true);
		mainLayout.addComponent(warehouseField, "top:17.0px;left:20.0px;");
		
		// productUnitField
		productUnitField = new ComboBox();
		productUnitField.setCaption("Unidad");
		productUnitField.setImmediate(false);
		productUnitField.setWidth("140px");
		productUnitField.setHeight("-1px");
		productUnitField.setTabIndex(6);
		productUnitField.setRequired(true);
		mainLayout.addComponent(productUnitField, "top:57.0px;left:420.0px;");
		
		// stockStatusField
		stockStatusField = new ComboBox();
		stockStatusField.setCaption("Estado stock");
		stockStatusField.setImmediate(false);
		stockStatusField.setWidth("220px");
		stockStatusField.setHeight("-1px");
		stockStatusField.setTabIndex(7);
		stockStatusField.setRequired(true);
		mainLayout.addComponent(stockStatusField, "top:100.0px;left:20.0px;");
		
		// serialNumberField
		serialNumberField = new TextField();
		serialNumberField.setCaption("N√∫mero Serie");
		serialNumberField.setImmediate(false);
		serialNumberField.setWidth("160px");
		serialNumberField.setHeight("-1px");
		serialNumberField.setTabIndex(8);
		mainLayout.addComponent(serialNumberField, "top:138.0px;left:20.0px;");
		
		// loteField
		loteField = new TextField();
		loteField.setCaption("Lote");
		loteField.setImmediate(false);
		loteField.setWidth("160px");
		loteField.setHeight("-1px");
		loteField.setTabIndex(9);
		mainLayout.addComponent(loteField, "top:138.0px;left:200.0px;");
		
		return mainLayout;
	}
}