package com.thingtrack.konekti.view.web.form.field;

import org.vaadin.addon.customfield.CustomField;

import com.thingtrack.konekti.domain.Client;
import com.thingtrack.konekti.view.web.form.selector.ClientSelectorWindow;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Button.ClickEvent;

@SuppressWarnings("serial")
public class ClientSelectorField extends CustomField {
	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Button btnSearch;
	@AutoGenerated
	private TextField clientField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Client client;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ClientSelectorField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		clientField.setNullRepresentation("");
		clientField.setRequiredError(clientField.getCaption() + " es un campo requerido");
		
		btnSearch.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				try {
					@SuppressWarnings("unused")
					ClientSelectorWindow windowDialog = new ClientSelectorWindow(getApplication().getMainWindow(), client, new ClientSelectorWindow.CloseWindowDialogListener() {
					    public void windowDialogClose(ClientSelectorWindow.CloseWindowDialogEvent event) {
					    	if (event.getDialogResult() != ClientSelectorWindow.DialogResult.SELECT)
					    		return ;
					    	
					    	client = event.getDomainEntity();
					    	clientField.setValue(client.getName());
					    }
		
					});
				} catch (Exception e) {
					throw new RuntimeException("Â¡No se pudo abrir el selector de clientes!", e);
				}
			}
		});
	}

	@Override
	public void setPropertyDataSource(Property newDataSource) {
		client = (Client) newDataSource.getValue();

		if (client != null)
			clientField.setValue(client.getName());
		
		super.setPropertyDataSource(newDataSource);
	}
	
	@Override
	public Object getValue() {
		return client;
	}
	
	@Override
	public Class<?> getType() {
		return Client.class;
		
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("28px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("28px");
		
		// holeField
		clientField = new TextField();
		clientField.setImmediate(false);
		clientField.setWidth("150px");
		clientField.setHeight("-1px");
		mainLayout.addComponent(clientField);
		
		// btnSearch
		btnSearch = new Button();
		btnSearch.setIcon(new ThemeResource("../konekti/images/icons/container-module/magnifier-zoom.png"));
		btnSearch.setImmediate(true);
		btnSearch.setWidth("-1px");
		btnSearch.setHeight("-1px");
		mainLayout.addComponent(btnSearch);
		mainLayout.setExpandRatio(btnSearch, 1.0f);
		
		return mainLayout;
	}

}
