package com.thingtrack.konekti.view.web.form;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import com.thingtrack.konekti.domain.AlarmJob;
import com.thingtrack.konekti.domain.AlarmTriggerType;
import com.thingtrack.konekti.domain.Location;
import com.thingtrack.konekti.service.api.AlarmTriggerTypeService;
import com.thingtrack.konekti.service.api.LocationService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.web.form.field.TriggerCalendarField;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class AlarmJobViewForm extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TriggerCalendarField alarmCalendarField;
	@AutoGenerated
	private ComboBox locationField;
	@AutoGenerated
	private DateField startTimeField;
	@AutoGenerated
	private TextField repeatCountField;
	@AutoGenerated
	private TextField future_timeField;
	@AutoGenerated
	private CheckBox futureField;
	@AutoGenerated
	private DateField endTimeField;
	@AutoGenerated
	private TextField descriptionField;
	@AutoGenerated
	private TextField cronExpressionField;
	@AutoGenerated
	private ComboBox alarmTriggerTypeField;
	@AutoGenerated
	private TextField alarmTriggerPriorityField;
	@AutoGenerated
	private TextField alarmNameField;
	@AutoGenerated
	private TextField alarmIntervalField;
	@AutoGenerated
	private TextField alarmGroupField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// form services
	private LocationService locationService;
	private AlarmTriggerTypeService alarmTriggerTypeService;
	
	// client type datasource
	private BeanItemContainer<Location> bcLocation = new BindingSource<Location>(Location.class);
	private BeanItemContainer<AlarmTriggerType> bcAlarmTriggerType = new BindingSource<AlarmTriggerType>(AlarmTriggerType.class);
		
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public AlarmJobViewForm() throws IllegalArgumentException, Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initComponents();
		
		cronExpressionField.setVisible(false);
		future_timeField.setEnabled(false);
		startTimeField.setResolution(DateField.RESOLUTION_SEC);
		endTimeField.setResolution(DateField.RESOLUTION_SEC);
		
		// configure Type data
		locationField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		locationField.setItemCaptionPropertyId("name");
		
		alarmTriggerTypeField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		alarmTriggerTypeField.setItemCaptionPropertyId("description");
		
		// get form services from OSGi Service Registry
		getServices();
		
		// load data sources
		loadData();
		
		futureField.setImmediate(true);
		futureField.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue() == null)
					return;
				
				if ((Boolean)event.getProperty().getValue())
					future_timeField.setEnabled(true);					
				else {
					future_timeField.setValue(null);
					future_timeField.setEnabled(false);
				}
				
			}
		});
		
		alarmTriggerTypeField.setImmediate(true);
		alarmTriggerTypeField.setNullSelectionAllowed(false);
		alarmTriggerTypeField.addListener(new ValueChangeListener() {						
			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue() == null)
					return;
				
				if (((AlarmTriggerType)event.getProperty().getValue()).getCode().equals(AlarmJob.ALARM_TRIGGER_TYPE.SIMPLE.name())) {
					alarmIntervalField.setVisible(true);
					repeatCountField.setVisible(true);
					cronExpressionField.setVisible(false);
				}
				else {
					alarmIntervalField.setVisible(false);
					repeatCountField.setVisible(false);
					cronExpressionField.setVisible(true);
				}
				
			}
		});
		
	}
	
	private void initComponents() {
		repeatCountField.setNullRepresentation("");
		descriptionField.setNullRepresentation("");
		cronExpressionField.setNullRepresentation("");
		alarmTriggerPriorityField.setNullRepresentation("");
		alarmNameField.setNullRepresentation("");
		alarmIntervalField.setNullRepresentation("");
		alarmGroupField.setNullRepresentation("");
		future_timeField.setNullRepresentation("");
	}
	
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(AlarmJobViewForm.class).getBundleContext();
			
			ServiceReference alarmTriggerTypeServiceReference = bundleContext.getServiceReference(AlarmTriggerTypeService.class.getName());			
			alarmTriggerTypeService = AlarmTriggerTypeService.class.cast(bundleContext.getService(alarmTriggerTypeServiceReference));
			
			ServiceReference locationReference = bundleContext.getServiceReference(LocationService.class.getName());
			locationService = LocationService.class.cast(bundleContext.getService(locationReference));
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	private void loadData() throws IllegalArgumentException, Exception {		
		bcAlarmTriggerType.removeAllItems();
		bcAlarmTriggerType.addAll(alarmTriggerTypeService.getAll());
		
		alarmTriggerTypeField.setContainerDataSource(bcAlarmTriggerType);
		alarmTriggerTypeField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		alarmTriggerTypeField.setItemCaptionPropertyId("description");
		
		bcLocation.removeAllItems();
		bcLocation.addAll(locationService.getAll());
		
		locationField.setContainerDataSource(bcLocation);
		
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("650px");
		mainLayout.setHeight("220px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("650px");
		setHeight("220px");
		
		// alarmGroupField
		alarmGroupField = new TextField();
		alarmGroupField.setCaption("Alarm Group");
		alarmGroupField.setImmediate(false);
		alarmGroupField.setWidth("140px");
		alarmGroupField.setHeight("-1px");
		mainLayout.addComponent(alarmGroupField, "top:20.0px;left:180.0px;");
		
		// alarmIntervalField
		alarmIntervalField = new TextField();
		alarmIntervalField.setCaption("Alarm Interval");
		alarmIntervalField.setImmediate(false);
		alarmIntervalField.setWidth("-1px");
		alarmIntervalField.setHeight("-1px");
		alarmIntervalField.setSecret(false);
		mainLayout.addComponent(alarmIntervalField, "top:180.0px;left:20.0px;");
		
		// alarmNameField
		alarmNameField = new TextField();
		alarmNameField.setCaption("Alarm Name");
		alarmNameField.setImmediate(false);
		alarmNameField.setWidth("140px");
		alarmNameField.setHeight("-1px");
		mainLayout.addComponent(alarmNameField, "top:20.0px;left:20.0px;");
		
		// alarmTriggerPriorityField
		alarmTriggerPriorityField = new TextField();
		alarmTriggerPriorityField.setCaption("Alarm Trigger Priority");
		alarmTriggerPriorityField.setImmediate(false);
		alarmTriggerPriorityField.setWidth("160px");
		alarmTriggerPriorityField.setHeight("-1px");
		mainLayout.addComponent(alarmTriggerPriorityField,
				"top:140.0px;left:200.0px;");
		
		// alarmTriggerTypeField
		alarmTriggerTypeField = new ComboBox();
		alarmTriggerTypeField.setCaption("Alarm Trigger Type");
		alarmTriggerTypeField.setImmediate(true);
		alarmTriggerTypeField.setWidth("160px");
		alarmTriggerTypeField.setHeight("-1px");
		mainLayout.addComponent(alarmTriggerTypeField,
				"top:140.0px;left:20.0px;");
		
		// cronExpressionField
		cronExpressionField = new TextField();
		cronExpressionField.setCaption("Cron Expression");
		cronExpressionField.setImmediate(false);
		cronExpressionField.setWidth("340px");
		cronExpressionField.setHeight("-1px");
		cronExpressionField.setSecret(false);
		mainLayout
				.addComponent(cronExpressionField, "top:180.0px;left:20.0px;");
		
		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Description");
		descriptionField.setImmediate(false);
		descriptionField.setWidth("620px");
		descriptionField.setHeight("-1px");
		descriptionField.setSecret(false);
		mainLayout.addComponent(descriptionField, "top:100.0px;left:20.0px;");
		
		// endTimeField
		endTimeField = new DateField();
		endTimeField.setCaption("End Time");
		endTimeField.setImmediate(false);
		endTimeField.setWidth("-1px");
		endTimeField.setHeight("-1px");
		endTimeField.setInvalidAllowed(false);
		mainLayout.addComponent(endTimeField, "top:60.0px;left:225.0px;");
		
		// futureField
		futureField = new CheckBox();
		futureField.setCaption("Future");
		futureField.setImmediate(false);
		futureField.setWidth("-1px");
		futureField.setHeight("-1px");
		mainLayout.addComponent(futureField, "top:140.0px;left:585.0px;");
		
		// future_timeField
		future_timeField = new TextField();
		future_timeField.setCaption("Future_time");
		future_timeField.setImmediate(false);
		future_timeField.setWidth("160px");
		future_timeField.setHeight("-1px");
		future_timeField.setSecret(false);
		mainLayout.addComponent(future_timeField, "top:140.0px;left:400.0px;");
		
		// repeatCountField
		repeatCountField = new TextField();
		repeatCountField.setCaption("Repeat Count");
		repeatCountField.setImmediate(false);
		repeatCountField.setWidth("-1px");
		repeatCountField.setHeight("24px");
		repeatCountField.setSecret(false);
		mainLayout.addComponent(repeatCountField, "top:180.0px;left:206.0px;");
		
		// startTimeField
		startTimeField = new DateField();
		startTimeField.setCaption("Start Time");
		startTimeField.setImmediate(false);
		startTimeField.setWidth("-1px");
		startTimeField.setHeight("-1px");
		startTimeField.setInvalidAllowed(false);
		mainLayout.addComponent(startTimeField, "top:60.0px;left:20.0px;");
		
		// locationField
		locationField = new ComboBox();
		locationField.setCaption("Ubicación");
		locationField.setImmediate(false);
		locationField.setWidth("-1px");
		locationField.setHeight("-1px");
		mainLayout.addComponent(locationField, "top:60.0px;left:420.0px;");
		
		// alarmCalendarField
		alarmCalendarField = new TriggerCalendarField();
		alarmCalendarField.setImmediate(false);
		alarmCalendarField.setWidth("-1px");
		alarmCalendarField.setHeight("-1px");
		mainLayout
				.addComponent(alarmCalendarField, "top:176.0px;left:397.0px;");
		
		return mainLayout;
	}
}