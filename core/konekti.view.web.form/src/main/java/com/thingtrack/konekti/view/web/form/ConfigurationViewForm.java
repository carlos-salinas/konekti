package com.thingtrack.konekti.view.web.form;

import java.util.List;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import com.thingtrack.konekti.domain.Configuration;
import com.thingtrack.konekti.domain.MenuCommandResource;
import com.thingtrack.konekti.domain.MenuFolderResource;
import com.thingtrack.konekti.domain.MenuResource;
import com.thingtrack.konekti.domain.MenuWorkbench;
import com.thingtrack.konekti.service.api.MenuWorkbenchService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class ConfigurationViewForm extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private ComboBox menuCommandResourceValField;
	@AutoGenerated
	private ComboBox typeValField;
	@AutoGenerated
	private TextField valueField;
	@AutoGenerated
	private TextField tagField;
	@AutoGenerated
	private TextField descriptionField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Configuration configuration;
	
	// form services
	private MenuWorkbenchService menuWorkbenchService;
	
	// client type datasource
	private BeanItemContainer<MenuCommandResource> bcMenuCommandResource = new BindingSource<MenuCommandResource>(MenuCommandResource.class);
		
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public ConfigurationViewForm() throws IllegalArgumentException, Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initComponents();
		
		menuCommandResourceValField.setNullSelectionAllowed(true);
		menuCommandResourceValField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		menuCommandResourceValField.setItemCaptionPropertyId("caption");
		
		typeValField.setNullSelectionAllowed(false);
		
		typeValField.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				Configuration.TYPE configurationType = (Configuration.TYPE)typeValField.getValue();
				
				configuration.setType(configurationType.name());
				
			}
		});
		
		menuCommandResourceValField.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				MenuCommandResource menuResource = (MenuCommandResource)menuCommandResourceValField.getValue();
				
				configuration.setMenuCommandResource(menuResource);
				
			}
		});
				
		getServices();
		
		loadData();
				
	}
	
	@Override
    public void attach() {
		super.attach();

		// recover the parent entity (EmployeeAgent) from parent view window (EmployeeAgentViewForm)
		if (getParent().getWindow() instanceof WindowDialog<?>) {
			@SuppressWarnings("unchecked")
			WindowDialog<Configuration> configurationWindowDialog = (WindowDialog<Configuration>)getParent().getWindow();
			configuration = configurationWindowDialog.getDomainEntity(); 
		
			if (configuration.getType() != null)								
				typeValField.setValue(Configuration.TYPE.valueOf(configuration.getType()));
						
			if (configuration.getMenuCommandResource() != null)				
				menuCommandResourceValField.setValue(configuration.getMenuCommandResource());
		}
	}
	
	private void initComponents() {
		valueField.setNullRepresentation("");
		tagField.setNullRepresentation("");
		descriptionField.setNullRepresentation("");
	
		tagField.focus();
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(ConfigurationViewForm.class).getBundleContext();

			ServiceReference menuWorkbenchServiceReference = bundleContext.getServiceReference(MenuWorkbenchService.class.getName());
			menuWorkbenchService = MenuWorkbenchService.class.cast(bundleContext.getService(menuWorkbenchServiceReference));	

		}
		catch (Exception e) {
			e.getMessage();

		}

	}
	
	private void loadData() throws IllegalArgumentException, Exception {		
		bcMenuCommandResource.removeAllItems();
		initMenuManager();
		
		menuCommandResourceValField.setContainerDataSource(bcMenuCommandResource);
		
		typeValField.removeAllItems();
		for (Configuration.TYPE type : Configuration.TYPE.values()) {
			typeValField.addItem(type);
		}
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("540px");
		mainLayout.setHeight("140px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("540px");
		setHeight("140px");
		
		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Description");
		descriptionField.setImmediate(false);
		descriptionField.setWidth("500px");
		descriptionField.setHeight("-1px");
		mainLayout.addComponent(descriptionField, "top:100.0px;left:20.0px;");
		
		// tagField
		tagField = new TextField();
		tagField.setCaption("Tag");
		tagField.setImmediate(false);
		tagField.setWidth("154px");
		tagField.setHeight("-1px");
		mainLayout.addComponent(tagField, "top:20.0px;left:20.0px;");
		
		// valueField
		valueField = new TextField();
		valueField.setCaption("Valor");
		valueField.setImmediate(false);
		valueField.setWidth("-1px");
		valueField.setHeight("-1px");
		mainLayout.addComponent(valueField, "top:60.0px;left:20.0px;");
		
		// typeField
		typeValField = new ComboBox();
		typeValField.setCaption("Tipo");
		typeValField.setImmediate(true);
		typeValField.setWidth("200px");
		typeValField.setHeight("-1px");
		mainLayout.addComponent(typeValField, "top:20.0px;left:320.0px;");
		
		// menuResourceField
		menuCommandResourceValField = new ComboBox();
		menuCommandResourceValField.setCaption("Recurso Menu");
		menuCommandResourceValField.setImmediate(true);
		menuCommandResourceValField.setWidth("200px");
		menuCommandResourceValField.setHeight("-1px");
		mainLayout.addComponent(menuCommandResourceValField, "top:60.0px;left:320.0px;");
		
		return mainLayout;
	}
	
	private void getMenu(MenuFolderResource menuFolderResource) {
		for (final MenuResource menuResource : menuFolderResource.getMenuResources()) {
			if (menuResource instanceof MenuFolderResource) {
				getMenu((MenuFolderResource) menuResource);
			} else {
				if (((MenuCommandResource) menuResource).getType() != MenuCommandResource.TYPE.SEPARATOR) {
					bcMenuCommandResource.addItem((MenuCommandResource)menuResource);
					//menuCommandResourceValField.addItem((MenuCommandResource)menuResource);
				}				
			}
		}
	}
	
	private void initMenuManager() {
		try {			
			// // STEP 1: construct vertical menu
			List<MenuWorkbench> menuResources = menuWorkbenchService.getAll();

			// get the first menu
			MenuWorkbench menuDefault = menuResources.get(0);

			for (MenuFolderResource menuFolderResource : menuDefault.getMenuFolderResource()) {

				// recursive menu manage
				getMenu(menuFolderResource);
			}

		} catch (Exception e) {
			e.getMessage();
		}
	}
}