package com.thingtrack.konekti.view.web.form;

import org.osgi.framework.BundleContext;
import org.osgi.framework.FrameworkUtil;
import org.osgi.framework.ServiceReference;

import com.thingtrack.konekti.domain.CalendarType;
import com.thingtrack.konekti.service.api.CalendarTypeService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class CalendarViewForm extends CustomComponent {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label lblSeparator;
	@AutoGenerated
	private DateField calendarToDateField;
	@AutoGenerated
	private DateField calendarFromDateField;
	@AutoGenerated
	private Embedded logoField;
	@AutoGenerated
	private ComboBox calendarTypeField;
	@AutoGenerated
	private TextField observationField;
	@AutoGenerated
	private TextField nameField;
	@AutoGenerated
	private TextField descriptionField;
	@AutoGenerated
	private CheckBox activeField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// form services
	private CalendarTypeService calendarTypeService;
	
	// organization type datasource
	private BeanItemContainer<CalendarType> bcCalendarType = new BindingSource<CalendarType>(CalendarType.class);	
	
	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * @throws Exception 
	 * @throws IllegalArgumentException 
	 */
	public CalendarViewForm() throws IllegalArgumentException, Exception {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		initComponents();
		
		// configure Organization Type data
		calendarTypeField.setItemCaptionMode(Select.ITEM_CAPTION_MODE_PROPERTY);
		calendarTypeField.setItemCaptionPropertyId("description");
		
		// get form services from OSGi Service Registry
		getServices();
		
		// load data sources
		loadData();
	}
	
	private void initComponents() {
		observationField.setNullRepresentation("");
		nameField.setNullRepresentation("");
		descriptionField.setNullRepresentation("");
		
		calendarFromDateField.setDateFormat("dd/MM/yyyy");
		calendarFromDateField.setImmediate(true);
		calendarToDateField.setDateFormat("dd/MM/yyyy");
		calendarToDateField.setImmediate(true);
		
        // Set the correct resolution
		calendarFromDateField.setResolution(PopupDateField.RESOLUTION_DAY);
		calendarToDateField.setResolution(PopupDateField.RESOLUTION_DAY);
		
		nameField.setRequiredError(nameField.getCaption() + " es un campo requerido");
		calendarTypeField.setRequiredError(calendarTypeField.getCaption() + " es un campo requerido");
		calendarFromDateField.setRequiredError(calendarFromDateField.getCaption() + " es un campo requerido");
		calendarToDateField.setRequiredError(calendarToDateField.getCaption() + " es un campo requerido");
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void getServices() {
		try {
			BundleContext bundleContext = FrameworkUtil.getBundle(CalendarViewForm.class).getBundleContext();
			
			ServiceReference calendarTypeServiceReference = bundleContext.getServiceReference(CalendarTypeService.class.getName());
			calendarTypeService = CalendarTypeService.class.cast(bundleContext.getService(calendarTypeServiceReference));
			
		}
		catch (Exception e) {
			e.getMessage();
			
		}
		
	}
	
	private void loadData() throws IllegalArgumentException, Exception {		
		bcCalendarType.removeAllItems();
		bcCalendarType.addAll(calendarTypeService.getAll());
		
		calendarTypeField.setContainerDataSource(bcCalendarType);
		
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("520px");
		mainLayout.setHeight("320px");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("520px");
		setHeight("320px");
		
		// activeField
		activeField = new CheckBox();
		activeField.setCaption("Activo");
		activeField.setImmediate(false);
		activeField.setWidth("-1px");
		activeField.setHeight("-1px");
		activeField.setRequired(true);
		mainLayout.addComponent(activeField, "top:94.0px;left:430.0px;");
		
		// descriptionField
		descriptionField = new TextField();
		descriptionField.setCaption("Descripci√≥n");
		descriptionField.setImmediate(false);
		descriptionField.setWidth("400px");
		descriptionField.setHeight("24px");
		descriptionField.setTabIndex(2);
		mainLayout.addComponent(descriptionField, "top:60.0px;left:20.0px;");
		
		// nameField
		nameField = new TextField();
		nameField.setCaption("Nombre");
		nameField.setImmediate(false);
		nameField.setWidth("320px");
		nameField.setHeight("-1px");
		nameField.setTabIndex(1);
		nameField.setRequired(true);
		mainLayout.addComponent(nameField, "top:20.0px;left:20.0px;");
		
		// observationField
		observationField = new TextField();
		observationField.setCaption("Observaciones");
		observationField.setImmediate(false);
		observationField.setWidth("480px");
		observationField.setHeight("120px");
		observationField.setTabIndex(6);
		mainLayout.addComponent(observationField, "top:180.0px;left:20.0px;");
		
		// calendarTypeField
		calendarTypeField = new ComboBox();
		calendarTypeField.setCaption("Tipo calendario");
		calendarTypeField.setImmediate(false);
		calendarTypeField.setWidth("-1px");
		calendarTypeField.setHeight("-1px");
		calendarTypeField.setTabIndex(3);
		calendarTypeField.setRequired(true);
		mainLayout.addComponent(calendarTypeField, "top:100.0px;left:20.0px;");
		
		// logoField
		logoField = new Embedded();
		logoField.setCaption("Logo");
		logoField.setImmediate(false);
		logoField.setWidth("70px");
		logoField.setHeight("60px");
		logoField
				.setSource(new ThemeResource("img/component/embedded_icon.png"));
		logoField.setType(1);
		logoField.setMimeType("image/png");
		mainLayout.addComponent(logoField, "top:21.0px;left:430.0px;");
		
		// calendarFromDateField
		calendarFromDateField = new DateField();
		calendarFromDateField.setCaption("Intervalo Fechas");
		calendarFromDateField.setImmediate(false);
		calendarFromDateField.setWidth("100.0%");
		calendarFromDateField.setHeight("-1px");
		calendarFromDateField.setInvalidAllowed(false);
		calendarFromDateField.setTabIndex(4);
		calendarFromDateField.setRequired(true);
		calendarFromDateField.setResolution(4);
		mainLayout.addComponent(calendarFromDateField,
				"top:140.0px;right:380.0px;left:20.0px;");
		
		// calendarToDateField
		calendarToDateField = new DateField();
		calendarToDateField.setImmediate(false);
		calendarToDateField.setWidth("119px");
		calendarToDateField.setHeight("-1px");
		calendarToDateField.setInvalidAllowed(false);
		calendarToDateField.setTabIndex(5);
		calendarToDateField.setRequired(true);
		calendarToDateField.setResolution(4);
		mainLayout.addComponent(calendarToDateField,
				"top:140.0px;left:161.0px;");
		
		// lblSeparator
		lblSeparator = new Label();
		lblSeparator.setImmediate(false);
		lblSeparator.setWidth("-1px");
		lblSeparator.setHeight("-1px");
		lblSeparator.setValue("__");
		mainLayout.addComponent(lblSeparator, "top:136.0px;left:144.0px;");
		
		return mainLayout;
	}
}