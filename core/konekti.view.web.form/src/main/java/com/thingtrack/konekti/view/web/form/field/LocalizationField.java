package com.thingtrack.konekti.view.web.form.field;

import java.util.ArrayList;
import java.util.List;

import org.vaadin.addon.customfield.CustomField;
import org.vaadin.addons.locationtextfield.GeocodedLocation;

import com.thingtrack.konekti.view.web.form.internal.AddressInputComponent;
import com.thingtrack.konekti.view.web.form.internal.ExtendedGoogleGeocoder;
import com.thingtrack.konekti.view.web.form.internal.LatLonInputComponent;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.Property.ValueChangeNotifier;
import com.vaadin.ui.Field;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class LocalizationField extends CustomField implements ValueChangeListener, ValueChangeNotifier {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet tabSheet;

	private AddressInputComponent addressInputComponent;
	private LatLonInputComponent latLonInputComponent;
	
	private ValueChangeListener listener;
	private GeocodedLocation geocodedLocation;
	
	
	private List<ValueChangeListener> listeners;
	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LocalizationField() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		tabSheet.setStyleName(Reindeer.TABSHEET_MINIMAL);
		
		listeners = new ArrayList<ValueChangeListener>();
		
		addressInputComponent = new AddressInputComponent();
		latLonInputComponent = new LatLonInputComponent();

		//Assign the Extended Google Geocoder
		addressInputComponent.setLocationProvider(ExtendedGoogleGeocoder.getInstance());
		latLonInputComponent.setLocationProvider(ExtendedGoogleGeocoder.getInstance()); 
		
		//Pass the LocationField like listener to the input fields
		addressInputComponent.addListener(this);
		latLonInputComponent.addListener(this);
		
		tabSheet.addTab(addressInputComponent, "Direcci√≥n");
		tabSheet.addTab(latLonInputComponent, "Coordenadas");
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// tabSheet
		tabSheet = new TabSheet();
		tabSheet.setImmediate(false);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void valueChange(Property.ValueChangeEvent event) {
		 
		 Property property = event.getProperty();
		 
		 geocodedLocation = (GeocodedLocation) property.getValue();
		 
		 if(property instanceof AddressInputComponent && latLonInputComponent.getValue() != geocodedLocation){
			 latLonInputComponent.setValue(geocodedLocation);
		 }
		 else if(property instanceof LatLonInputComponent && addressInputComponent.getValue() != geocodedLocation){
			 addressInputComponent.setValue(geocodedLocation);
		 }
		 
		 for(ValueChangeListener listener : listeners)
			listener.valueChange(new Field.ValueChangeEvent(LocalizationField.this));
	}

	@Override
	public void addListener(ValueChangeListener listener) {
		listeners.add(listener);
	}

	@Override
	public void removeListener(ValueChangeListener listener) {
		listeners.remove(listener);		
	}
	
	@Override
	public Object getValue() {
		return geocodedLocation;
	}
	
	@Override
	public void setValue(Object newValue) throws ReadOnlyException,
			ConversionException {
		
		if(newValue != null && !(newValue instanceof GeocodedLocation))
			throw new ConversionException("There is an " + GeocodedLocation.class.getSimpleName()); 
		
		geocodedLocation = (GeocodedLocation) newValue;
		
		latLonInputComponent.setValue(geocodedLocation);
	}

	@Override
	public Class<?> getType() {
		return GeocodedLocation.class;
	}
	

}
