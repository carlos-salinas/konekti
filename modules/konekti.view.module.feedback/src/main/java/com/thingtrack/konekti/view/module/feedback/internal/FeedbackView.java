package com.thingtrack.konekti.view.module.feedback.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import com.thingtrack.konekti.domain.Feedback;
import com.thingtrack.konekti.service.api.FeedbackService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.CustomTable.ColumnGenerator;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class FeedbackView extends AbstractView implements
		ClickRefreshButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgFeedback;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private FeedbackService feedbackService;

	private BindingSource<Feedback> bsFeedback = new BindingSource<Feedback>(Feedback.class, 0);

	private NavigationToolbar navigationToolbar;
	private BoxToolbar boxToolbar;

	private IViewContainer viewContainer;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public FeedbackView(IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.feedbackService = FeedbackViewContainer.getFeedbackService();

		// initialize datasource views
		initView();

	}

	private void initView() {
		// initialize Slide View Organization View
		dgFeedback.setImmediate(true);

		refreshBindindSource();

		// STEP 01: create grid view for slide Organization View
		try {
			dgFeedback.setBindingSource(bsFeedback);
			dgFeedback.addGeneratedColumn(
					InvoiceCodeColumn.INVOICE_CODE_COLUMN_ID,
					new InvoiceCodeColumn());
			dgFeedback.addGeneratedColumn(
					InvoiceClientColumn.INVOICE_CLIENT_COLUMN_ID,
					new InvoiceClientColumn());

			dgFeedback.setVisibleColumns(new String[] { "comment",
					InvoiceCodeColumn.INVOICE_CODE_COLUMN_ID,
					InvoiceClientColumn.INVOICE_CLIENT_COLUMN_ID,
					"feedbackType.description", "feedbackStatus.description",
					"feedbackDate" });
			dgFeedback.setColumnHeaders(new String[] { "Comentarios",
					"Código Factura", "Cliente Factura", "Tipo", "Estado",
					"Fecha Registro" });
		} catch (Exception ex) {
			ex.getMessage();
		}

		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsFeedback, viewContainer);
		boxToolbar = new BoxToolbar(1, bsFeedback);

		navigationToolbar.addListenerRefreshButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		// set navigation toolbar visibility
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);

		removeAllToolbar();

		addToolbar(navigationToolbar);
		addToolbar(boxToolbar);

	}

	private void refreshBindindSource() {
		try {
			bsFeedback.removeAllItems();
			bsFeedback.addAll(feedbackService.getAll());

			bsFeedback.addNestedContainerProperty("feedbackType.description");
			bsFeedback.addNestedContainerProperty("feedbackStatus.description");

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// dataGridView_1
		dgFeedback = new DataGridView() {
			@Override
			protected String formatPropertyValue(Object rowId, Object colId,
					Property property) {
				// Format by property type
				if (property.getType() == Date.class) {
					SimpleDateFormat df = new SimpleDateFormat(
							"dd/MM/yyyy HH:mm");

					return df.format((Date) property.getValue());
				}

				return super.formatPropertyValue(rowId, colId, property);
			}
		};

		dgFeedback.setImmediate(false);
		dgFeedback.setWidth("100.0%");
		dgFeedback.setHeight("100.0%");
		mainLayout.addComponent(dgFeedback);
		mainLayout.setExpandRatio(dgFeedback, 1.0f);

		return mainLayout;
	}

	private class InvoiceCodeColumn implements ColumnGenerator {

		static final String INVOICE_CODE_COLUMN_ID = "invoice-code_column-id";

		@Override
		public Object generateCell(CustomTable source, Object itemId,
				Object columnId) {

			Label invoiceCodeLabel = new Label();

			Feedback feedback = (Feedback) itemId;

			if (feedback.getInvoice() != null)
				invoiceCodeLabel.setValue(feedback.getInvoice().getCode());

			return invoiceCodeLabel;
		}

	}

	private class InvoiceClientColumn implements ColumnGenerator {

		static final String INVOICE_CLIENT_COLUMN_ID = "invoice-client_column-id";

		@Override
		public Object generateCell(CustomTable source, Object itemId,
				Object columnId) {

			Label invoiceClientLabel = new Label();

			Feedback feedback = (Feedback) itemId;

			if (feedback.getInvoice() != null)
				invoiceClientLabel.setValue(feedback.getInvoice()
						.getInvoiceClient().getDescription());

			return invoiceClientLabel;
		}

	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgFeedback.setFilterBarVisible();

	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgFeedback.print("Listado Reclamaciones");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

}
