package com.thingtrack.konekti.view.module.sensor.internal;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;

import com.thingtrack.konekti.view.addon.ui.AbstractViewContainer;
import com.thingtrack.konekti.view.addon.ui.SliderView;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.ISliderView;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewChangeListener;
import com.thingtrack.konekti.view.kernel.ui.layout.IView;

import com.thingtrack.konekti.service.sensor.api.CaptureLocationService;
import com.thingtrack.konekti.service.sensor.api.CaptureMessageService;
import com.thingtrack.konekti.service.sensor.api.CaptureTelemetryService;
import com.thingtrack.konekti.service.sensor.api.SensorLocationService;
import com.thingtrack.konekti.service.sensor.api.SensorMessageService;
import com.thingtrack.konekti.service.sensor.api.SensorTelemetryService;

@SuppressWarnings("serial")
public class SensorViewContainer extends AbstractViewContainer {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private SliderView sliderView;

	/** Views **/
	private CaptureView captureView;
	
	private SensorView sensorView;
		
	/** Business services **/
	@Autowired
	private SensorMessageService sensorMessageService;
	@Autowired
	private SensorLocationService sensorLocationService;
	@Autowired
	private SensorTelemetryService sensorTelemetryService;
	@Autowired
	private CaptureMessageService captureMessageService;
	@Autowired
	private CaptureLocationService captureLocationService;
	@Autowired
	private CaptureTelemetryService captureTelemetryService;
	
	private IWorkbenchContext context; 
	
	// Thread Local Bundle Business Services
	private static ThreadLocal<CaptureMessageService> threadCaptureMessageService= new ThreadLocal<CaptureMessageService>();
	private static ThreadLocal<CaptureLocationService> threadCaptureLocationService = new ThreadLocal<CaptureLocationService>();
	private static ThreadLocal<CaptureTelemetryService> threadCaptureTelemetryService = new ThreadLocal<CaptureTelemetryService>();
	private static ThreadLocal<SensorMessageService> threadSensorMessageService = new ThreadLocal<SensorMessageService>();
	private static ThreadLocal<SensorLocationService> threadSensorLocationService = new ThreadLocal<SensorLocationService>();
	private static ThreadLocal<SensorTelemetryService> threadSensorTelemetryService = new ThreadLocal<SensorTelemetryService>();
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
		
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public SensorViewContainer(IWorkbenchContext context) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.context = context;
	}

	@SuppressWarnings("unused")
	@PostConstruct
	private void createViews() {
		// initialize thread local bundle services
		threadCaptureMessageService.set(captureMessageService);
		threadCaptureLocationService.set(captureLocationService);
		threadCaptureTelemetryService.set(captureTelemetryService);
		threadSensorMessageService.set(sensorMessageService);
		threadSensorLocationService.set(sensorLocationService);
		threadSensorTelemetryService.set(sensorTelemetryService);
		
		// add all views controlled by SliderView Component
		captureView = new CaptureView(context, this);
		sliderView.addView(captureView);
		views.put(0, captureView);
		
		sensorView = new SensorView(context, this);
		sliderView.addView(sensorView);
		views.put(1, sensorView);
	}

	@SuppressWarnings("unused")
	@PreDestroy
	private void destroyViews() {
		threadCaptureMessageService.set(null);
		threadCaptureLocationService.set(null);
		threadCaptureTelemetryService.set(null);
		threadSensorMessageService.set(null);
		threadSensorLocationService.set(null);
		threadSensorTelemetryService.set(null);
		
	}
	
    public static CaptureMessageService getCaptureMessageService() {
        return threadCaptureMessageService.get();
        
    }
    	
    public static CaptureLocationService getCaptureLocationService() {
        return threadCaptureLocationService.get();
        
    }
    
    public static CaptureTelemetryService getCaptureTelemetryService() {
        return threadCaptureTelemetryService.get();
        
    }
    
    public static SensorMessageService getSensorMessageService() {
        return threadSensorMessageService.get();
        
    }
    
    public static SensorLocationService getSensorLocationService() {
        return threadSensorLocationService.get();
        
    }

    public static SensorTelemetryService getSensorTelemetryService() {
        return threadSensorTelemetryService.get();
        
    }
    
	@Override
	public ISliderView getSliderView() {
		return sliderView;
		
	}
	
	@Override
	public IView getSelectedView() {
		return sliderView.getSelectedView();
		
	}
	
	@Override
	public void addListener(IViewChangeListener listener) {
		sliderView.addListener(listener);
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// sliderView
		sliderView = new SliderView();
		sliderView.setImmediate(false);
		sliderView.setWidth("100.0%");
		sliderView.setHeight("100.0%");
		
		mainLayout.addComponent(sliderView);
		mainLayout.setExpandRatio(sliderView, 1.0f);
		
		return mainLayout;
	}

}
