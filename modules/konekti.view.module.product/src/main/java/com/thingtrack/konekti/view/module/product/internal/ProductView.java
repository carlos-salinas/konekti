package com.thingtrack.konekti.view.module.product.internal;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;
import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Product;
import com.thingtrack.konekti.knowledge.service.api.ProductKnowledgeService;
import com.thingtrack.konekti.service.api.ProductService;
import com.thingtrack.konekti.service.api.ProductTypeService;
import com.thingtrack.konekti.service.api.SupplierService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickImportButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.ProductViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.CustomTable.ColumnGenerator;
import com.vaadin.ui.Field;
import com.vaadin.ui.Label;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class ProductView extends AbstractView 
	implements ClickRefreshButtonListener, 
		ClickAddButtonListener, ClickEditButtonListener, 
		ClickRemoveButtonListener, ClickFilterButtonListener, 
		ClickPrintButtonListener, ClickImportButtonListener {
			
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgProduct;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private ProductService productService;
	private ProductTypeService productTypeService;
	private SupplierService supplierService;
	private ProductKnowledgeService productKnowledgeService;
	
	private BindingSource<Product> bsProduct =  new BindingSource<Product>(Product.class, 0);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
		
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	
	private static final String IMPORT_SHEET_NAME = "PRODUCT";
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ProductView(IWorkbenchContext context, IViewContainer viewContainer) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here	
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.context = context;
		
		this.productService = ProductViewContainer.getProductService();
		this.productTypeService = ProductViewContainer.getProductTypeService();
	    this.supplierService = ProductViewContainer.getSupplierService();
	    this.productKnowledgeService = ProductViewContainer.getProductKnowledgeService();
	    
		// initialize datasource views		
		initView();	
	}

	private void initView() {
		// initialize Slide View Organization View
		dgProduct.setImmediate(true);		
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {			
			dgProduct.setBindingSource(bsProduct);
			dgProduct.addGeneratedColumn(SupplierNameColumn.SUPPLIER_NAME_COLUMN_ID, new SupplierNameColumn());
			dgProduct.setVisibleColumns(new String[] { "code", "name", "description", "hasLote", "hasSerialNumber", "hasExpeditionDate", "averagePrice", "productType.description", SupplierNameColumn.SUPPLIER_NAME_COLUMN_ID, "productActive" } );       
			dgProduct.setColumnHeaders(new String[] { "Código", "Nombre", "Descripción", "Con Lote", "Con Númnero Serie", "Con Fecha Caducidad", "Precio Medio", "Tipo", "Proveedor", "Activo" } );
			dgProduct.setEditable(true);
			dgProduct.setTableFieldFactory(new TableFieldFactory() {					
				@Override
				public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {
					if("hasLote".equals(propertyId) || "hasSerialNumber".equals(propertyId) || "hasExpeditionDate".equals(propertyId) || "productActive".equals(propertyId)) {
						
						CheckBox field = new CheckBox();
						field.setReadOnly(true);
						return field;
					}
					
					return null;
				}
			});
			
			dgProduct.setColumnCollapsed("code", true);
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Employee Agent View
		navigationToolbar = new NavigationToolbar(0, bsProduct, viewContainer);
		editionToolbar = new EditionToolbar(1, bsProduct);
		boxToolbar = new BoxToolbar(2, bsProduct);
		
		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		boxToolbar.addListenerImportButton(this);
		
		boxToolbar.setImportButton(true);
		
		dgProduct.addListenerAddButton(this);
		dgProduct.addListenerEditButton(this);
		dgProduct.addListenerDeleteButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsProduct.removeAllItems();
			bsProduct.addAll(productService.getAll());
			
			bsProduct.addNestedContainerProperty("productType.description");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	private void refreshDataGridView(Product productSaved) {
		if(bsProduct.containsId(productSaved)){			
			Product previousProduct = bsProduct.prevItemId(productSaved);
			
			bsProduct.removeItem(productSaved);
			bsProduct.addItemAfter(previousProduct, productSaved);
			bsProduct.setItemId(productSaved);
		}
		else
			bsProduct.addItem(productSaved);
		
	}
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}

	@Override
	public void addButtonClick(ClickNavigationEvent event) {
		Product product = new Product();

		try {
			@SuppressWarnings("unused")
			WindowDialog<Product> windowDialog = new WindowDialog<Product>(getWindow(), "Nuevo Producto", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new ProductViewForm(),  product, 
					new WindowDialog.CloseWindowDialogListener<Product>() {
			    public void windowDialogClose(WindowDialog<Product>.CloseWindowDialogEvent<Product> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Product savingProduct = event.getDomainEntity();
			    		
			    		Product savedProduct = productService.save(savingProduct);
			    		
			    		refreshDataGridView(savedProduct);
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nuevo producto!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Producto!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Producto!", e);
		} 
		
	}
	
	@Override
	public void editButtonClick(ClickNavigationEvent event) {
		Product editingsavingProduct = (Product) event.getRegister();

		try {
			@SuppressWarnings("unused")
			WindowDialog<Product> windowDialog = new WindowDialog<Product>(getWindow(), "Editor Producto", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new ProductViewForm(), editingsavingProduct, 
					new WindowDialog.CloseWindowDialogListener<Product>() {
			    public void windowDialogClose(WindowDialog<Product>.CloseWindowDialogEvent<Product> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Product savingProduct = event.getDomainEntity();
			    		
			    		Product savedProduct = productService.save(savingProduct);
			    		
			    		refreshDataGridView(savedProduct);			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar el producto!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Producto!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Producto!", e);
		} 
		
	}
	
	@Override
	public void deleteButtonClick(ClickNavigationEvent event) {
		final Product editingProduct = (Product) event.getRegister();
		
		if (editingProduct == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Dirección",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			productService.delete(editingProduct);
		            			
		            			// refresh
		            			refreshBindindSource();
		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el producto!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el producto!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgEmployee
		dgProduct = new DataGridView();
		dgProduct.setImmediate(false);
		dgProduct.setWidth("100.0%");
		dgProduct.setHeight("100.0%");
		mainLayout.addComponent(dgProduct);
		mainLayout.setExpandRatio(dgProduct, 1.0f);
		
		return mainLayout;
	}

	private class SupplierNameColumn implements ColumnGenerator {

		static final String SUPPLIER_NAME_COLUMN_ID = "supplier_name_column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label supplierNameLabel = new Label();
			
			Product product = (Product) itemId;
			
			if(product.getProductSupplier() != null)
				supplierNameLabel.setValue(product.getProductSupplier().getName());
			
			return supplierNameLabel;
		}
				
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgProduct.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgProduct.print("Maestro Productos");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

	@Override
	public void importButtonClick(BoxToolbar.ClickNavigationEvent event) {
		List<Product> products = new ArrayList<Product>();
		
		if (event.getFile() == null)
			return;
		
		InputStream file = new ByteArrayInputStream(event.getFile());
		
		// Load XLS file
		POIFSFileSystem fs;
		try {
			fs = new POIFSFileSystem(file);
			HSSFWorkbook workbook = new HSSFWorkbook(fs);
			workbook.setMissingCellPolicy(Row.RETURN_NULL_AND_BLANK);
			
			for (int x = 0; x < workbook.getNumberOfSheets(); x++) {
				HSSFSheet sheet = workbook.getSheetAt(x);
				
				if (IMPORT_SHEET_NAME.equals(sheet.getSheetName())) {
					for(int rowIndex = 1; rowIndex < sheet.getPhysicalNumberOfRows(); rowIndex++){
						HSSFRow row = sheet.getRow(rowIndex);
						
						if(row == null)
							break;
						
						Excel2Entity excel2Entity = new Excel2Entity(context, productTypeService, supplierService, row);
						
						try {
							products.add(excel2Entity.parse());
						} catch (Exception e) {
							throw new RuntimeException("¡No se pudo parsear el registro!", e);
						}
						
					}
					
					try {
						productKnowledgeService.importProducts(products);
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo importar el fichero!", e);
					}
				}
			}
		} catch (IOException e) {
			throw new RuntimeException("¡No se pudo importar el fichero!", e);
		}
		
	} 
}
