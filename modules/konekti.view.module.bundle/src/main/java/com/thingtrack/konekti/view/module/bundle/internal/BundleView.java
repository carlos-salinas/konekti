package com.thingtrack.konekti.view.module.bundle.internal;

import java.util.ArrayList;
import java.util.List;

import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;

import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.module.bundle.addon.BundleToolbar;
import com.thingtrack.konekti.view.module.bundle.addon.BundleToolbar.ClickOpenBundleButtonListener;
import com.thingtrack.konekti.view.module.bundle.addon.BundleToolbar.ClickStartBundleButtonListener;
import com.thingtrack.konekti.view.module.bundle.addon.BundleToolbar.ClickStopBundleButtonListener;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class BundleView extends AbstractView 
	implements ClickRefreshButtonListener, ClickFilterButtonListener, ClickPrintButtonListener,
	ClickStartBundleButtonListener, ClickStopBundleButtonListener, ClickOpenBundleButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgBundle;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private org.apache.felix.bundlerepository.RepositoryAdmin felixRepositoryAdminService;
	private org.osgi.service.obr.RepositoryAdmin obrRepositoryAdminService;
	private BundleContext bundleContext;
	
	private org.apache.felix.bundlerepository.Resolver felixResolver;
	private org.osgi.service.obr.Resolver obrResolver;
	
	private List<KonektiFelixResource> scBundle = new ArrayList<KonektiFelixResource>();
	private BindingSource<KonektiFelixResource> bsBundle =  new BindingSource<KonektiFelixResource>(KonektiFelixResource.class, 1);
	
	private NavigationToolbar navigationToolbar;
	private BoxToolbar boxToolbar;
	private BundleToolbar bundleToolbar;
	
	private IViewContainer viewContainer;
	private IWorkbenchContext konektiContext;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public BundleView(IWorkbenchContext context, IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.konektiContext = context;
						
		this.felixRepositoryAdminService = BundleViewContainer.getContainerFelixRepositoryAdminService();
		this.obrRepositoryAdminService = BundleViewContainer.getContainerObrRepositoryAdminService();
	    this.bundleContext = BundleViewContainer.getContainerBundleContextService();
	    		
		// initialize datasource views		
		initView();	
		
	}

	private void initView() {
		// initialize Slide View Organization View
		dgBundle.setImmediate(true);		
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {
			dgBundle.setBindingSource(bsBundle);
			
			dgBundle.setVisibleColumns(new String[] { "bundleId", "id", "symbolicName", "version", "url", "licenseUrl", "description", "documentation", "copyright", "sourceUrl", "size", "bundleStatus" });
			dgBundle.setColumnHeaders(new String[] { "Bundle Id", "id", "Symbolic Name", "Version", "URL", "License URL", "Description", "Documentation", "Copyright", "Source URL", "Size [Bytes]", "Status" });		
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsBundle, viewContainer);
		boxToolbar = new BoxToolbar(1, bsBundle);
		bundleToolbar = new BundleToolbar(2, bsBundle, viewContainer);
		
		navigationToolbar.addListenerRefreshButton(this);
				
		// set navigation toolbar visibility
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		bundleToolbar.addListenerStartBundleButton(this);
		bundleToolbar.addListenerStopBundleButton(this);
		bundleToolbar.addListenerOpenBundleButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(boxToolbar);
		addToolbar(bundleToolbar);

		// get Felix Resolver
		if (felixRepositoryAdminService != null)
			felixResolver = felixRepositoryAdminService.resolver();
		
		// get OBR Resolver
		if (obrRepositoryAdminService != null)
			obrResolver = obrRepositoryAdminService.resolver();
	}
	
	private void refreshBindindSource() {
		try {					
			if (felixRepositoryAdminService != null) {
		    	 org.apache.felix.bundlerepository.Repository felixLocalRepository = felixRepositoryAdminService.getLocalRepository();
		    	 		    	 
		    	 org.apache.felix.bundlerepository.Resource[] felixLocalResources = felixLocalRepository.getResources();
		    	 
		    	 scBundle.clear();		    	 
		    	 for (org.apache.felix.bundlerepository.Resource localResource : felixLocalResources) {

		    		 Bundle bundle = null;
		    		 String bundleStatus =null;
		    		 
		    		 bundle = getBundle(localResource.getSymbolicName(), localResource.getVersion().toString());
		    		 		    		 
		    		 if (bundle != null) {
	    				 if (bundle.getState() == Bundle.ACTIVE)
	    					 bundleStatus = "ACTIVE";
	    				 else if (bundle.getState() == Bundle.UNINSTALLED)
	    					 bundleStatus = "UNINSTALLED";
	    				 else if (bundle.getState() == Bundle.INSTALLED)
	    					 bundleStatus = "INSTALLED";
	    				 else if (bundle.getState() == Bundle.RESOLVED)
	    					 bundleStatus = "RESOLVED";
	    				 else if (bundle.getState() == Bundle.STARTING)
	    					 bundleStatus = "STARTING";
	    				 else if (bundle.getState() == Bundle.STOPPING)
	    					 bundleStatus = "STOPPING";	    				 
	    			 }		    		
		    		 
		    		 scBundle.add(new KonektiFelixResource(localResource.getId(),
		    				 							   bundle.getBundleId(),
								    				  	   localResource.getSymbolicName(),
								    				  	   localResource.getVersion().toString(),
								    				  	   localResource.getPresentationName(),
								    				  	   felixLocalRepository,
								    				  	   localResource.getURI(),
								    				  	   localResource.getRequirements(),
							                               localResource.getCapabilities(),
								                           localResource.getCategories(),
								                           (String) localResource.getProperties().get(org.apache.felix.bundlerepository.Resource.LICENSE_URI),
								                           (String) localResource.getProperties().get(org.apache.felix.bundlerepository.Resource.DESCRIPTION),
								                           (String) localResource.getProperties().get(org.apache.felix.bundlerepository.Resource.DOCUMENTATION_URI),
								                           (String) localResource.getProperties().get(org.apache.felix.bundlerepository.Resource.COPYRIGHT),
								                           (String) localResource.getProperties().get(org.apache.felix.bundlerepository.Resource.SOURCE_URI),
								                           (String) (localResource.getProperties().get(org.apache.felix.bundlerepository.Resource.SIZE)),
								                           null,
								                           localResource,
								                           bundleStatus,
								                           bundle));
		    		 
		    	 }
			}
			
			bsBundle.removeAllItems();
			bsBundle.addAll(scBundle);
			
			//bsJob.addNestedContainerProperty("client.name");
					
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}		
	
	private Bundle getBundle(String symbolicName, String version) {
		for(Bundle bundle : bundleContext.getBundles()) {			
			if (bundle.getSymbolicName().equals(symbolicName) && bundle.getVersion().toString().equals(version))
				return bundle;
			
		}
		
		return null;
	}
	
	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent arg0) {
		try {
			dgBundle.print("Listado OSGi Bundles");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent arg0) {
		dgBundle.setFilterBarVisible();
		
	}
	
	@Override
	public void stopBundleButtonClick(BundleToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}

	@Override
	public void startBundleButtonClick(BundleToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	@Override
	public void openBundleButtonClick(BundleToolbar.ClickNavigationEvent event) {
		KonektiFelixResource konektiFelixResource = (KonektiFelixResource)event.getRegister();
		
		if (konektiFelixResource == null)
			return;
		
		try {
			konektiContext.openBundle(konektiFelixResource.getSymbolicName(), konektiFelixResource.getVersion());
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el bundle!", e);
		}
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dataGridView_1
		dgBundle = new DataGridView();
		
		dgBundle.setImmediate(false);
		dgBundle.setWidth("100.0%");
		dgBundle.setHeight("100.0%");
		mainLayout.addComponent(dgBundle);
		mainLayout.setExpandRatio(dgBundle, 1.0f);
		
		return mainLayout;
	}

}
