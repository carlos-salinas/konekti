package com.thingtrack.konekti.view.module.stock.internal;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Stock;
import com.thingtrack.konekti.service.api.StockService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.web.form.StockViewForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class StockView extends AbstractView 
	implements ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener {
			
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgStock;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private StockService stockService;
	
	private BindingSource<Stock> bsStock =  new BindingSource<Stock>(Stock.class, 0);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	
	private IWorkbenchContext context;
	private IViewContainer viewContainer;
		
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public StockView(IWorkbenchContext context, IViewContainer viewContainer) {		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here	
		// set Slide View Services and ViewContainer to navigate
		this.context = context;
		this.viewContainer = viewContainer;
		this.stockService = StockViewContainer.getStockService();
		
		// initialize datasource views		
		initView();	
	}

	private void initView() {
		// initialize Slide View Organization View
		dgStock.setImmediate(true);		
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {			
			dgStock.setBindingSource(bsStock);
			dgStock.setVisibleColumns(new String[] { "area.description", "product.description", "quantity", "productUnit.description", "price", "stockStatus.description", "serialNumber", "lote", "expeditionDate", "stockDate" } );       
			dgStock.setColumnHeaders(new String[] { "Almacén", "Producto", "Cantidad", "Unidad", "Precio", "Estado", "Número Serie", "Lote", "Fecha Caducidad", "Fecha Stock" } );

			dgStock.setColumnCollapsed("serialNumber", true);
			dgStock.setColumnCollapsed("lote", true);
			dgStock.setColumnCollapsed("expeditionDate", true);
			dgStock.setColumnCollapsed("comment", true);
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Employee Agent View
		navigationToolbar = new NavigationToolbar(0, bsStock, viewContainer);
		editionToolbar = new EditionToolbar(1, bsStock);
		boxToolbar = new BoxToolbar(2, bsStock);
		
		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.setUpButton(false);
		navigationToolbar.setDownButton(false);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		dgStock.addListenerAddButton(this);
		dgStock.addListenerEditButton(this);
		dgStock.addListenerDeleteButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsStock.removeAllItems();
			bsStock.addAll(stockService.getAll());
			
			bsStock.addNestedContainerProperty("product.description");
			bsStock.addNestedContainerProperty("productUnit.description");
			bsStock.addNestedContainerProperty("stockStatus.description");
			bsStock.addNestedContainerProperty("area.description");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}

	private void refreshDataGridView(Stock savedStock) {
		if(bsStock.containsId(savedStock)){			
			Stock previousStock = bsStock.prevItemId(savedStock);
			
			bsStock.removeItem(savedStock);
			bsStock.addItemAfter(previousStock, savedStock);
			bsStock.setItemId(savedStock);
		}
		else
			bsStock.addItem(savedStock);
		
	}
	
	@Override
	public void addButtonClick(ClickNavigationEvent event) {
		Stock stock;
		try {
			stock = stockService.createNewStock(context.getArea());
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo crear nueva entidad stock!", e);
		}
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Stock> windowDialog = new WindowDialog<Stock>(getWindow(), "Nuevo Stock", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new StockViewForm(),  stock, 
					new WindowDialog.CloseWindowDialogListener<Stock>() {
			    public void windowDialogClose(WindowDialog<Stock>.CloseWindowDialogEvent<Stock> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Stock savingStock = event.getDomainEntity();
			    		
			    		Stock savedStock = stockService.save(savingStock);
			    		
			    		refreshDataGridView(savedStock);
			    		
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo crear el nuevo stock!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Nuevo Stock!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Nuevo Stock!", e);
		} 
		
	}
	
	@Override
	public void editButtonClick(ClickNavigationEvent event) {
		Stock editingStock = (Stock) event.getRegister();

		try {
			@SuppressWarnings("unused")
			WindowDialog<Stock> windowDialog = new WindowDialog<Stock>(getWindow(), "Editor Stock", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new StockViewForm(), editingStock, 
					new WindowDialog.CloseWindowDialogListener<Stock>() {
			    public void windowDialogClose(WindowDialog<Stock>.CloseWindowDialogEvent<Stock> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Stock savingStock = event.getDomainEntity();
			    		
			    		Stock savedStock= stockService.save(savingStock);
			    		
			    		refreshDataGridView(savedStock);
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo modificar el stock!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Editor Stock!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Editor Stock!", e);
		} 
		
	}
	
	@Override
	public void deleteButtonClick(ClickNavigationEvent event) {
		final Stock editingStock = (Stock) event.getRegister();
		
		if (editingStock == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Stock",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			stockService.delete(editingStock);
		            			
		            			// refresh Stock
		            			bsStock.removeItem(editingStock);		            			
		            		} catch (IllegalArgumentException e) {
		            			throw new RuntimeException("¡No se pudo borrar el stock!", e);
		            		} catch (Exception e) {
		            			throw new RuntimeException("¡No se pudo borrar el stock!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dgEmployee
		dgStock = new DataGridView();
		dgStock.setImmediate(false);
		dgStock.setWidth("100.0%");
		dgStock.setHeight("100.0%");
		mainLayout.addComponent(dgStock);
		mainLayout.setExpandRatio(dgStock, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgStock.setFilterBarVisible();
		
	}

	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgStock.print("Listado Stock");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}


}
