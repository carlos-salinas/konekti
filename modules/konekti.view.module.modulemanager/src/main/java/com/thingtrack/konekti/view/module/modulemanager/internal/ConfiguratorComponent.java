package com.thingtrack.konekti.view.module.modulemanager.internal;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.peter.buttongroup.ButtonGroup;

import com.thingtrack.konekti.service.api.MenuCommandResourceService;
import com.thingtrack.konekti.service.api.MenuFolderResourceService;
import com.thingtrack.konekti.service.api.MenuWorkbenchService;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.kernel.IModuleService;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.ISliderView;
import com.thingtrack.konekti.view.kernel.ui.layout.IToolbar;
import com.thingtrack.konekti.view.kernel.ui.layout.IView;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewChangeListener;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.module.modulemanager.ConfiguratorModule;
import com.thingtrack.konekti.view.module.modulemanager.internal.ConfiguratedModulesComponent.MenuResourceListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class ConfiguratorComponent extends AbstractView implements
		MenuResourceListener, IViewContainer {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout workAreaLayout;

	@AutoGenerated
	private ConfiguratedModulesComponent configuratedModulesComponent;

	@AutoGenerated
	private AvailableModulesComponent availableModulesComponent;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// Enterprise services
	@Autowired
	private MenuWorkbenchService menuWorkbenchService;
	@Autowired
	private IModuleService moduleService;
	@Autowired
	private MenuFolderResourceService menuFolderResourceService;
	@Autowired
	private MenuCommandResourceService menuCommandResourceService;

	// Tool bar
	private ConfiguratorToolbar configuratorToolbar;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ConfiguratorComponent() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		workAreaLayout.setMargin(true);
		workAreaLayout.setSpacing(true);

		configuratedModulesComponent.addListener(this);
	}

	public ConfiguratorComponent(IWorkbenchContext context) {
		this();

		configuratorToolbar = new ConfiguratorToolbar();
		addToolbar(configuratorToolbar);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// workAreaLayout
		workAreaLayout = buildWorkAreaLayout();
		mainLayout.addComponent(workAreaLayout);
		mainLayout.setExpandRatio(workAreaLayout, 1.0f);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildWorkAreaLayout() {
		// common part: create layout
		workAreaLayout = new HorizontalLayout();
		workAreaLayout.setImmediate(false);
		workAreaLayout.setWidth("100.0%");
		workAreaLayout.setHeight("100.0%");
		workAreaLayout.setMargin(false);

		// availableModulesComponent
		availableModulesComponent = new AvailableModulesComponent();
		availableModulesComponent.setImmediate(false);
		availableModulesComponent.setWidth("-1px");
		availableModulesComponent.setHeight("100.0%");
		workAreaLayout.addComponent(availableModulesComponent);

		// configuratedModulesComponent
		configuratedModulesComponent = new ConfiguratedModulesComponent();
		configuratedModulesComponent.setImmediate(false);
		configuratedModulesComponent.setWidth("100.0%");
		configuratedModulesComponent.setHeight("100.0%");
		workAreaLayout.addComponent(configuratedModulesComponent);
		workAreaLayout.setExpandRatio(configuratedModulesComponent, 1.0f);

		return workAreaLayout;
	}

	@SuppressWarnings("unused")
	@PostConstruct
	private void loadData() throws Exception {

		availableModulesComponent.loadData(menuCommandResourceService,
				moduleService);
		configuratedModulesComponent.loadData(menuWorkbenchService,
				moduleService, menuFolderResourceService,
				menuCommandResourceService);
	}

	@Override
	public void onMenuResourceDataChange() {
		configuratorToolbar.applyChangesButton.setEnabled(true);
	}

	@Override
	public void onMenuResourceChangesApplied() {
		configuratorToolbar.applyChangesButton.setEnabled(false);
	}

	@Override
	public IView getSelectedView() {
		return this;
	}

	@Override
	public IView getNext() {
		return null;
	}

	@Override
	public IView getPrevious() {
		return null;
	}

	@Override
	public ISliderView getSliderView() {
		return null;
	}

	@Override
	public void addListener(IViewChangeListener listener) {

	}

	private class ConfiguratorToolbar extends CssLayout implements IToolbar {

		Button createMenuFolderResourceButton;
		Button removeMenuResourceButton;
		Button applyChangesButton;

		public ConfiguratorToolbar() {

			super();
			addComponent(buildToolbarButtons());
		}

		@Override
		public int getPosition() {
			return 0;
		}

		@Override
		public ComponentContainer getContent() {
			return buildToolbarButtons();
		}

		private HorizontalLayout buildToolbarButtons() {

			HorizontalLayout toolbarLayout = new HorizontalLayout();
			toolbarLayout.setImmediate(false);
			toolbarLayout.setSpacing(true);

			ButtonGroup toolbar = new ButtonGroup();
			HorizontalLayout innerToolbarLayout = new HorizontalLayout();
			innerToolbarLayout.setSpacing(true);

			// createMenuFolderResourceButton;
			createMenuFolderResourceButton = new Button("Crear menu");
			createMenuFolderResourceButton.setIcon(new ThemeResource(
					ConfiguratorModule.MODULE_ICONS_PATH + "folder--plus.png"));
			createMenuFolderResourceButton
					.addListener(configuratedModulesComponent.new CreateMenuFolderResourceHandler());
			toolbar.addButton(createMenuFolderResourceButton);

			// removeMenuResourceButton;
			removeMenuResourceButton = new Button("Borrar");
			removeMenuResourceButton.setIcon(new ThemeResource(
					ConfiguratorModule.MODULE_ICONS_PATH + "cross.png"));
			removeMenuResourceButton
					.addListener(configuratedModulesComponent.new RemoveMenuResourceHandler(
							availableModulesComponent
									.getAvailableModuleTableContainer()));
			toolbar.addButton(removeMenuResourceButton);

			innerToolbarLayout.addComponent(toolbar);

			// ApplyChangesButton
			applyChangesButton = new Button("Aplicar cambios");
			applyChangesButton.setIcon(new ThemeResource(
					ConfiguratorModule.MODULE_ICONS_PATH + "disks-black.png"));
			applyChangesButton.setEnabled(false);
			applyChangesButton
					.addListener(configuratedModulesComponent.new ApplyMenuResourceChangesHandler());
			innerToolbarLayout.addComponent(applyChangesButton);

			toolbarLayout.addComponent(innerToolbarLayout);

			return toolbarLayout;

		}

	}

}
