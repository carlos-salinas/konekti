package com.thingtrack.konekti.view.module.calendar.internal;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.Calendar;
import com.thingtrack.konekti.service.api.CalendarService;
import com.thingtrack.konekti.view.web.form.CalendarViewForm;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickDownButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class CalendarView extends AbstractView 
	implements ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, ClickRemoveButtonListener,  ClickDownButtonListener,
	ClickFilterButtonListener, ClickPrintButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgCalendar;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private CalendarService calendarService;
	
	private BindingSource<Calendar> bsCalendar =  new BindingSource<Calendar>(Calendar.class, 0);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
		
	private IViewContainer viewContainer;
	private IWorkbenchContext context;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CalendarView(IWorkbenchContext context, IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		this.context = context;
		
		this.calendarService = CalendarViewContainer.getCalendarService();
		
		// initialize datasource views		
		initView();	
		
	}

	private void initView() {
		// initialize Slide View Organization View
		dgCalendar.setImmediate(true);		
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {
			dgCalendar.setBindingSource(bsCalendar);
			dgCalendar.setVisibleColumns(new String[] { "name", "description", "calendarType.description", "calendarFromDate", "calendarToDate", "observation", "active" } );       
			dgCalendar.setColumnHeaders(new String[] { "Nombre", "Descripción", "Tipo", "Fecha Inicio", "Fecha Fin", "Observaciones", "Activo" } );
			dgCalendar.setEditable(true);
			dgCalendar.setTableFieldFactory(new TableFieldFactory() {					
				@Override
				public Field createField(Container container, Object itemId, Object propertyId, Component uiContext) {
					if("active".equals(propertyId)) {						
						CheckBox field = new CheckBox();
						field.setReadOnly(true);						
						return field;
					}
					
					return null;
				}
			});
			
			dgCalendar.setColumnCollapsed("observation", true);
		}
		catch(Exception ex) {
			ex.getMessage();
		}
			
		// STEP 02: create toolbar for slide Organization View
		navigationToolbar = new NavigationToolbar(0, bsCalendar, viewContainer);
		editionToolbar = new EditionToolbar(1, bsCalendar);
		boxToolbar = new BoxToolbar(2, bsCalendar);
		
		navigationToolbar.addListenerDownButton(this);
		navigationToolbar.addListenerRefreshButton(this);		
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);
		
		removeAllToolbar();
		
		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);

	}
	
	private void refreshBindindSource() {
		try {		
			bsCalendar.removeAllItems();
			bsCalendar.addAll(calendarService.getAll());
	
			bsCalendar.addNestedContainerProperty("calendarType.description");
			
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}		
	
	private void refreshDataGridView(Calendar calendarSaved) {
		if(bsCalendar.containsId(calendarSaved)){			
			Calendar previousCalendar = bsCalendar.prevItemId(calendarSaved);
			
			bsCalendar.removeItem(calendarSaved);
			bsCalendar.addItemAfter(previousCalendar, calendarSaved);
			bsCalendar.setItemId(calendarSaved);
		}
		else
			bsCalendar.addItem(calendarSaved);
		
	}
	
	@Override
	public void refreshButtonClick(ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		Calendar calendar = new Calendar();

		try {
			@SuppressWarnings("unused")
			WindowDialog<Calendar> windowDialog = new WindowDialog<Calendar>(getWindow(), "Nueva Calendario", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new CalendarViewForm(), calendar, 
					new WindowDialog.CloseWindowDialogListener<Calendar>() {
			    public void windowDialogClose(WindowDialog<Calendar>.CloseWindowDialogEvent<Calendar> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		Calendar savingCalendar = event.getDomainEntity();
			    		
			    		Calendar savedCalendar = calendarService.save(savingCalendar);
			    		
			    		refreshDataGridView(savedCalendar);			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo crear el nuevo calendario!",
								e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Calendario!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Nuevo Calendario!", e);
		} 
		
	}
	
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		Calendar editingCalendar = (Calendar) event.getRegister();
				
		try {
			@SuppressWarnings("unused")
			WindowDialog<Calendar> windowDialog = new WindowDialog<Calendar>(getApplication().getMainWindow() , "Editor Calendario", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new CalendarViewForm(),editingCalendar, 
					new WindowDialog.CloseWindowDialogListener<Calendar>() {
			    public void windowDialogClose(WindowDialog<Calendar>.CloseWindowDialogEvent<Calendar> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {
			    		
			    		Calendar savingCalendar = event.getDomainEntity();
			    		
			    		Calendar savedCalendar = calendarService.save(savingCalendar);
			    		
			    		refreshDataGridView(savedCalendar);			    		
					} catch (Exception e) {
						throw new RuntimeException(
								"¡No se pudo modificar el calendario!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Calendario!", e);
		} catch (Exception e) {
			throw new RuntimeException(
					"¡No se pudo abrir el formulario Editor Calendario!", e);
		} 
		
	}
	
	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final Calendar editingCalendar = (Calendar) event.getRegister();
				
		ConfirmDialog.show(getWindow(), "Borrar Calendario",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			calendarService.delete(editingCalendar);
		            			
		            			bsCalendar.removeItem(editingCalendar);		            			
		            		} catch (IllegalArgumentException e) {
								throw new RuntimeException(
										"¡No se pudo borrar el calendario!", e);
		            		} catch (Exception e) {
								throw new RuntimeException(
										"¡No se pudo borrar el calendario!", e);
		            		}
		                } 
		            }
		        });
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dataGridView_1
		dgCalendar = new DataGridView() {
		    @Override
		    protected String formatPropertyValue(Object rowId,
		            Object colId, Property property) {
		    	// Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		            
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		
		dgCalendar.setImmediate(false);
		dgCalendar.setWidth("100.0%");
		dgCalendar.setHeight("100.0%");
		mainLayout.addComponent(dgCalendar);
		mainLayout.setExpandRatio(dgCalendar, 1.0f);
		
		return mainLayout;
	}

	@Override
	public void downButtonClick(ClickNavigationEvent event) {
		Calendar calendarSelected  = null;
		
		if (bsCalendar.getItemIds().size() > 0) {
			// get selected Organization
			calendarSelected = (Calendar)bsCalendar.getItemId();
			
			// inject the locations data from organization in the detail Location View
			CalendarCardView calendarDetailViewView = (CalendarCardView)viewContainer.getNext();
			calendarDetailViewView.setCalendar(calendarSelected);
			
			// roll to the detail Location View
			viewContainer.getSliderView().rollNext();
		}
		
	}

	@Override
	public void filterButtonClick(BoxToolbar.ClickNavigationEvent event) {
		dgCalendar.setFilterBarVisible();
		
	}
	
	@Override
	public void printButtonClick(BoxToolbar.ClickNavigationEvent event) {
		try {
			dgCalendar.print("Maestro Calendarios");
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
		
	}
	
}
