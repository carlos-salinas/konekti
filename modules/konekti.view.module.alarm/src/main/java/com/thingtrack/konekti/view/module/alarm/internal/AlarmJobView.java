package com.thingtrack.konekti.view.module.alarm.internal;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.quartz.Scheduler;
import org.vaadin.dialogs.ConfirmDialog;

import com.thingtrack.konekti.domain.AlarmJob;
import com.thingtrack.konekti.service.api.AlarmJobService;
import com.thingtrack.konekti.view.addon.data.BindingSource;
import com.thingtrack.konekti.view.addon.ui.AbstractView;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickFilterButtonListener;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickNavigationEvent;
import com.thingtrack.konekti.view.addon.ui.BoxToolbar.ClickPrintButtonListener;
import com.thingtrack.konekti.view.addon.ui.DataGridView;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickAddButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickEditButtonListener;
import com.thingtrack.konekti.view.addon.ui.EditionToolbar.ClickRemoveButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickRefreshButtonListener;
import com.thingtrack.konekti.view.addon.ui.NavigationToolbar.ClickUpButtonListener;
import com.thingtrack.konekti.view.addon.ui.WindowDialog;
import com.thingtrack.konekti.view.addon.ui.WindowDialog.DialogResult;
import com.thingtrack.konekti.view.kernel.IWorkbenchContext;
import com.thingtrack.konekti.view.kernel.ui.layout.IViewContainer;
import com.thingtrack.konekti.view.module.alarm.addon.AlarmToolbar;
import com.thingtrack.konekti.view.module.alarm.addon.AlarmToolbar.ClickStartJobButtonListener;
import com.thingtrack.konekti.view.module.alarm.addon.AlarmToolbar.ClickStopJobButtonListener;
import com.thingtrack.konekti.view.web.form.AlarmJobViewForm;

import com.vaadin.data.Property;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomTable;
import com.vaadin.ui.Field;
import com.vaadin.ui.Label;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.CustomTable.ColumnGenerator;

@SuppressWarnings("serial")
public class AlarmJobView extends AbstractView 
	implements ClickRefreshButtonListener, ClickAddButtonListener, ClickEditButtonListener, 
	           ClickRemoveButtonListener, ClickFilterButtonListener, ClickPrintButtonListener,
	           ClickUpButtonListener, ClickStartJobButtonListener, ClickStopJobButtonListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private DataGridView dgAlarmJob;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private AlarmJobService alarmJobService;
	
	private BindingSource<AlarmJob> bsAlarmJob = new BindingSource<AlarmJob>(AlarmJob.class, 1);
	
	private NavigationToolbar navigationToolbar;
	private EditionToolbar editionToolbar;
	private BoxToolbar boxToolbar;
	private AlarmToolbar alarmToolbar;
	
	private IWorkbenchContext context;
	private IViewContainer viewContainer;
	
	private Scheduler scheduler;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AlarmJobView(IWorkbenchContext context, IViewContainer viewContainer) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		this.context = context;
		
		// set Slide View Services and ViewContainer to navigate
		this.viewContainer = viewContainer;
		
		this.alarmJobService = AlarmViewContainer.getAlarmJobService();
		this.scheduler = AlarmViewContainer.getScheduler();
		
		// initialize datasource views
		initView();
	}

	private void initView() {
		// initialize Slide View Organization View
		dgAlarmJob.setImmediate(true);

		refreshBindindSource();

		// STEP 01: create grid view for slide Organization View
		try {
			dgAlarmJob.setBindingSource(bsAlarmJob);
			dgAlarmJob.addGeneratedColumn(LocationNameColumn.LOCATION_NAME_COLUMN_ID, new LocationNameColumn());
			dgAlarmJob.addGeneratedColumn(AlarmTriggerTypeColumn.ALARM_TRIGGER_TYPE_DESCRIPTION_COLUMN_ID, new AlarmTriggerTypeColumn());
			dgAlarmJob.setVisibleColumns(new String[] {LocationNameColumn.LOCATION_NAME_COLUMN_ID, "alarmName", "alarmGroup", "description", AlarmTriggerTypeColumn.ALARM_TRIGGER_TYPE_DESCRIPTION_COLUMN_ID, "alarmTriggerPriority",
					"startTime", "endTime", "alarmInterval", "repeatCount", "alarmCalendar", "future", "future_time", "cronExpression", "lastExecution", "error", "active" });
			dgAlarmJob.setColumnHeaders(new String[] { "Ubicación", "Nombre", "Grupo", "Descripción", "Tipo Disparador", "Prioridad Disparador", "Fecha Comienzo", "Fecha Fin",
					"Intervalo [s]", "Repetición", "Calendario", "Futuro", "Fecha Futuro", "Expresión Cron", "Ultima Ejecución", "Error", "Activa"});			
			dgAlarmJob.setEditable(true);
			
			dgAlarmJob.setColumnCollapsed("alarmTriggerType.description", true);
			dgAlarmJob.setColumnCollapsed("alarmTriggerPriority", true);
			//dgAlarmJob.setColumnCollapsed("startTime", true);
			//dgAlarmJob.setColumnCollapsed("endTime", true);
			dgAlarmJob.setColumnCollapsed("alarmInterval", true);
			dgAlarmJob.setColumnCollapsed("repeatCount", true);
			dgAlarmJob.setColumnCollapsed("alarmCalendar", true);
			dgAlarmJob.setColumnCollapsed("future", true);
			dgAlarmJob.setColumnCollapsed("future_time", true);
			dgAlarmJob.setColumnCollapsed("cronExpression", true);
			
			dgAlarmJob.setTableFieldFactory(new TableFieldFactory() {					
				@Override
				public Field createField(Container container, Object itemId,
						Object propertyId, Component uiContext) {
					if("active".equals(propertyId) || "error".equals(propertyId) || "future".equals(propertyId)) {						
						CheckBox field = new CheckBox();
						field.setReadOnly(true);						
						return field;
					}
					
					return null;
				}
			});
			
		} catch (Exception ex) {
			ex.getMessage();
		}

		// STEP 02: create toolbar for slide Employee Agent View
		navigationToolbar = new NavigationToolbar(0, bsAlarmJob, viewContainer);
		editionToolbar = new EditionToolbar(1, bsAlarmJob);
		boxToolbar = new BoxToolbar(2, bsAlarmJob);		
		alarmToolbar = new AlarmToolbar(3, bsAlarmJob, viewContainer, scheduler);
		
		navigationToolbar.addListenerRefreshButton(this);
		navigationToolbar.addListenerUpButton(this);
		
		editionToolbar.addListenerAddButton(this);
		editionToolbar.addListenerEditButton(this);
		editionToolbar.addListenerDeleteButton(this);
		
		boxToolbar.addListenerFilterButton(this);
		boxToolbar.addListenerPrintButton(this);

		alarmToolbar.addListenerStartJobButton(this);
		alarmToolbar.addListenerStopJobButton(this);
		
		dgAlarmJob.addListenerAddButton(this);
		dgAlarmJob.addListenerEditButton(this);
		dgAlarmJob.addListenerDeleteButton(this);
		
		removeAllToolbar();

		addToolbar(navigationToolbar);
		addToolbar(editionToolbar);
		addToolbar(boxToolbar);
		addToolbar(alarmToolbar);

	}
	
	private void refreshBindindSource() {
		try {
			bsAlarmJob.removeAllItems();
			bsAlarmJob.addAll(alarmJobService.getAll());
			
			bsAlarmJob.addNestedContainerProperty("alarmTriggerType.description");
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void upButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		viewContainer.getSliderView().rollPrevious();
		
	}
	
	@Override
	public void refreshButtonClick(NavigationToolbar.ClickNavigationEvent event) {
		refreshBindindSource();
		
	}
	
	private void refreshDataGridView(AlarmJob alarmJobtSaved) {
		if(bsAlarmJob.containsId(alarmJobtSaved)){			
			AlarmJob previousAlarmJob= bsAlarmJob.prevItemId(alarmJobtSaved);
			
			bsAlarmJob.removeItem(alarmJobtSaved);
			bsAlarmJob.addItemAfter(previousAlarmJob, alarmJobtSaved);
			bsAlarmJob.setItemId(alarmJobtSaved);
		}
		else
			bsAlarmJob.addItem(alarmJobtSaved);
		
	}
	
	@Override
	public void addButtonClick(EditionToolbar.ClickNavigationEvent event) {
		AlarmJob alarmJob = new AlarmJob();
		alarmJob.setActive(true);
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<AlarmJob> windowDialog = new WindowDialog<AlarmJob>(getWindow(), "Nueva Configuración Alarma", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new AlarmJobViewForm(), alarmJob, 
					new WindowDialog.CloseWindowDialogListener<AlarmJob>() {
			    public void windowDialogClose(WindowDialog<AlarmJob>.CloseWindowDialogEvent<AlarmJob> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {		
			    		AlarmJob savingAlarmJob= event.getDomainEntity();
			    		
			    		AlarmJob savedAlarmJob = alarmJobService.save(savingAlarmJob);
						
						refreshDataGridView(savedAlarmJob);
			    		
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo crear la nueva configuración alarma!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Nuevo Configuración Alarma!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Nuevo Configuración Alarma!", e);
		}
		
	}
	
	@Override
	public void editButtonClick(EditionToolbar.ClickNavigationEvent event) {
		AlarmJob editingAlarmJob = (AlarmJob) event.getRegister();
		
		try {
			@SuppressWarnings("unused")
			WindowDialog<AlarmJob> windowDialog = new WindowDialog<AlarmJob>(getWindow(), "Editor Agente Client", 
					"Guardar", DialogResult.SAVE, "Cancelar", DialogResult.CANCEL, 
					new AlarmJobViewForm(), editingAlarmJob, 
					new WindowDialog.CloseWindowDialogListener<AlarmJob>() {
			    public void windowDialogClose(WindowDialog<AlarmJob>.CloseWindowDialogEvent<AlarmJob> event) {
			    	if (event.getDialogResult() != WindowDialog.DialogResult.SAVE)
			    		return ;
			    	
			    	try {		
			    		AlarmJob savingAlarmJob = event.getDomainEntity();			    		
			    		
			    		AlarmJob savedClientAgent = alarmJobService.save(savingAlarmJob);			    		
			    		
						refreshDataGridView(savedClientAgent);
					} catch (Exception e) {
						throw new RuntimeException("¡No se pudo modificar la configuración de alarma!", e);
						
					}
			    }

			});
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Editor Configuración Alarma!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo abrir el formulario Editor Configuración Alarma!", e);
		}
	}
	
	@Override
	public void deleteButtonClick(EditionToolbar.ClickNavigationEvent event) {
		final AlarmJob editingAlarmJob = (AlarmJob) event.getRegister();
		
		if (editingAlarmJob == null)
			return;
		
		ConfirmDialog.show(getWindow(), "Borrar Configuración Alarma",
		        "¿Estás seguro?", "Si", "No",
		        new ConfirmDialog.Listener() {

		            public void onClose(ConfirmDialog dialog) {
		                if (dialog.isConfirmed()) {
		            		try {
		            			alarmJobService.delete(editingAlarmJob);
		            			
		            			bsAlarmJob.removeItem(editingAlarmJob);
		            			
		            		} catch (IllegalArgumentException e) {
		            			throw new RuntimeException("¡No se pudo borrar la configuración de alarma!", e);
		            		} catch (Exception e) {
		            			throw new RuntimeException("¡No se pudo borrar la configuración de alarma!", e);
		            		}
		                } 
		            }
		        });
		
	}

	@Override
	public void filterButtonClick(ClickNavigationEvent event) {
		dgAlarmJob.setFilterBarVisible();
		
	}
	
	@Override
	public void printButtonClick(ClickNavigationEvent event) {
		try {
			dgAlarmJob.print("Listado Configuración Alarmas");
			
		}
		catch (Exception e) {
			throw new RuntimeException("¡No se pudo imprimir el informe!", e);
		}
			
	}
	
	@Override
	public void startJobButtonClick(AlarmToolbar.ClickNavigationEvent event) {
		AlarmJob editingAlarmJob = (AlarmJob) event.getRegister();		
		editingAlarmJob.setActive(true);
		
		try {
			alarmJobService.save(editingAlarmJob);
			refreshDataGridView(editingAlarmJob);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo encender la alarm!", e);
		}
			
	}
	
	@Override
	public void stopJobButtonClick(AlarmToolbar.ClickNavigationEvent event) {
		AlarmJob editingAlarmJob = (AlarmJob) event.getRegister();		
		editingAlarmJob.setActive(false);
		
		try {
			alarmJobService.save(editingAlarmJob);
			refreshDataGridView(editingAlarmJob);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo parar la alarm!", e);
		}
	}
	
	private class LocationNameColumn implements ColumnGenerator {

		static final String LOCATION_NAME_COLUMN_ID = "location_name_column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label locationNameLabel = new Label();
			
			AlarmJob alarmJob = (AlarmJob) itemId;
			
			if(alarmJob.getLocation() != null)
				locationNameLabel.setValue(alarmJob.getLocation().getName());
			
			return locationNameLabel;
		}
				
	}
	
	private class AlarmTriggerTypeColumn implements ColumnGenerator {

		static final String ALARM_TRIGGER_TYPE_DESCRIPTION_COLUMN_ID = "alarm-trigger-type-description-column-id";
		
		@Override
		public Object generateCell(CustomTable source, Object itemId, Object columnId) {
			
			Label locationNameLabel = new Label();
			
			AlarmJob alarmJob = (AlarmJob) itemId;
			
			if(alarmJob.getAlarmTriggerType() != null)
				locationNameLabel.setValue(alarmJob.getAlarmTriggerType().getDescription());
			
			return locationNameLabel;
		}
				
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// dataGridView_1
		dgAlarmJob = new DataGridView() {
			@Override
			protected String formatPropertyValue(Object rowId, Object colId, Property property) {
				if (property != null && (property.getType() == Date.class || property.getType() == Calendar.class)) {
					SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

					if (property.getType() == Date.class && property.getValue() != null)
						return df.format((Date) property.getValue());
					else  {
						if (property.getType() == Calendar.class && property.getValue() != null)
							return df.format(((Calendar) property.getValue()).getTime());
						else
							return super.formatPropertyValue(rowId, colId, property);
					}
					
				}

				return super.formatPropertyValue(rowId, colId, property);
			}
		};
		
		dgAlarmJob.setImmediate(false);
		dgAlarmJob.setWidth("100.0%");
		dgAlarmJob.setHeight("100.0%");
		mainLayout.addComponent(dgAlarmJob);
		mainLayout.setExpandRatio(dgAlarmJob, 1.0f);
		
		return mainLayout;
	}

}
